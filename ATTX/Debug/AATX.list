
AATX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f28  08006f28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006f30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000014  08006f44  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006f44  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122ee  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002340  00000000  00000000  00032332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a6  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a24  00000000  00000000  0004eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c866  00000000  00000000  0006155a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fddc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004adc  00000000  00000000  000fde10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ed0 	.word	0x08006ed0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08006ed0 	.word	0x08006ed0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <NRF24_DelayMicroSeconds>:


//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <NRF24_DelayMicroSeconds+0x3c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <NRF24_DelayMicroSeconds+0x40>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9a      	lsrs	r2, r3, #18
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80004fc:	bf00      	nop
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	60fa      	str	r2, [r7, #12]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1fa      	bne.n	80004fe <NRF24_DelayMicroSeconds+0x22>
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000008 	.word	0x20000008
 800051c:	165e9f81 	.word	0x165e9f81

08000520 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d008      	beq.n	8000540 <NRF24_csn+0x20>
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <NRF24_csn+0x38>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <NRF24_csn+0x3c>)
 8000534:	8811      	ldrh	r1, [r2, #0]
 8000536:	2201      	movs	r2, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fe6d 	bl	8004218 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800053e:	e007      	b.n	8000550 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <NRF24_csn+0x38>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <NRF24_csn+0x3c>)
 8000546:	8811      	ldrh	r1, [r2, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fe64 	bl	8004218 <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000038 	.word	0x20000038
 800055c:	2000003c 	.word	0x2000003c

08000560 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(GPIOA, nrf24_CE_PIN, GPIO_PIN_SET);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d007      	beq.n	800057e <NRF24_ce+0x1e>
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <NRF24_ce+0x34>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <NRF24_ce+0x38>)
 8000578:	f003 fe4e 	bl	8004218 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800057c:	e006      	b.n	800058c <NRF24_ce+0x2c>
	else HAL_GPIO_WritePin(GPIOA, nrf24_CE_PIN, GPIO_PIN_RESET);
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <NRF24_ce+0x34>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <NRF24_ce+0x38>)
 8000588:	f003 fe46 	bl	8004218 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000003e 	.word	0x2000003e
 8000598:	40020000 	.word	0x40020000

0800059c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ffba 	bl	8000520 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	f003 031f 	and.w	r3, r3, #31
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80005b6:	f107 010c 	add.w	r1, r7, #12
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2201      	movs	r2, #1
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <NRF24_read_register+0x4c>)
 80005c0:	f004 fb65 	bl	8004c8e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	1c59      	adds	r1, r3, #1
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2201      	movs	r2, #1
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <NRF24_read_register+0x4c>)
 80005d0:	f004 fc99 	bl	8004f06 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80005d4:	7b7b      	ldrb	r3, [r7, #13]
 80005d6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff ffa1 	bl	8000520 <NRF24_csn>
	return retData;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000040 	.word	0x20000040

080005ec <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff8f 	bl	8000520 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	b2db      	uxtb	r3, r3
 800060a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800060c:	f107 010c 	add.w	r1, r7, #12
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <NRF24_read_registerN+0x4c>)
 8000616:	f004 fb3a 	bl	8004c8e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	b29a      	uxth	r2, r3
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <NRF24_read_registerN+0x4c>)
 8000624:	f004 fc6f 	bl	8004f06 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ff79 	bl	8000520 <NRF24_csn>
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000040 	.word	0x20000040

0800063c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ff67 	bl	8000520 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	b2db      	uxtb	r3, r3
 800065a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000660:	f107 010c 	add.w	r1, r7, #12
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	2202      	movs	r2, #2
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <NRF24_write_register+0x40>)
 800066a:	f004 fb10 	bl	8004c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff ff56 	bl	8000520 <NRF24_csn>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000040 	.word	0x20000040

08000680 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff45 	bl	8000520 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <NRF24_write_registerN+0x4c>)
 80006aa:	f004 faf0 	bl	8004c8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <NRF24_write_registerN+0x4c>)
 80006b8:	f004 fae9 	bl	8004c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff2f 	bl	8000520 <NRF24_csn>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000040 	.word	0x20000040

080006d0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff ff1f 	bl	8000520 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80006e6:	f107 010f 	add.w	r1, r7, #15
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2201      	movs	r2, #1
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <NRF24_write_payload+0x40>)
 80006f0:	f004 facd 	bl	8004c8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <NRF24_write_payload+0x40>)
 80006fe:	f004 fac6 	bl	8004c8e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff0c 	bl	8000520 <NRF24_csn>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000040 	.word	0x20000040

08000714 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000720:	f000 fa10 	bl	8000b44 <NRF24_getPayloadSize>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	4293      	cmp	r3, r2
 800072c:	d303      	bcc.n	8000736 <NRF24_read_payload+0x22>
 800072e:	f000 fa09 	bl	8000b44 <NRF24_getPayloadSize>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <NRF24_read_payload+0x24>
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fef0 	bl	8000520 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000740:	2361      	movs	r3, #97	; 0x61
 8000742:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000744:	f107 010e 	add.w	r1, r7, #14
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	2201      	movs	r2, #1
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <NRF24_read_payload+0x5c>)
 800074e:	f004 fa9e 	bl	8004c8e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	b29a      	uxth	r2, r3
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <NRF24_read_payload+0x5c>)
 800075c:	f004 fbd3 	bl	8004f06 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fedd 	bl	8000520 <NRF24_csn>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000040 	.word	0x20000040

08000774 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	20e1      	movs	r0, #225	; 0xe1
 800077c:	f7ff ff5e 	bl	800063c <NRF24_write_register>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000788:	21ff      	movs	r1, #255	; 0xff
 800078a:	20e2      	movs	r0, #226	; 0xe2
 800078c:	f7ff ff56 	bl	800063c <NRF24_write_register>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800079a:	2007      	movs	r0, #7
 800079c:	f7ff fefe 	bl	800059c <NRF24_read_register>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80007b0:	b082      	sub	sp, #8
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
 80007c0:	4613      	mov	r3, r2
 80007c2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80007c4:	4b65      	ldr	r3, [pc, #404]	; (800095c <NRF24_begin+0x1ac>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	2258      	movs	r2, #88	; 0x58
 80007ce:	4619      	mov	r1, r3
 80007d0:	f006 fb68 	bl	8006ea4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80007d4:	4a62      	ldr	r2, [pc, #392]	; (8000960 <NRF24_begin+0x1b0>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80007da:	4a62      	ldr	r2, [pc, #392]	; (8000964 <NRF24_begin+0x1b4>)
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80007e0:	4a61      	ldr	r2, [pc, #388]	; (8000968 <NRF24_begin+0x1b8>)
 80007e2:	883b      	ldrh	r3, [r7, #0]
 80007e4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fe9a 	bl	8000520 <NRF24_csn>
	NRF24_ce(0);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff feb7 	bl	8000560 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f002 fdd2 	bl	800339c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007f8:	2108      	movs	r1, #8
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff ff1e 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000800:	213f      	movs	r1, #63	; 0x3f
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ff1a 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000808:	2103      	movs	r1, #3
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff ff16 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000810:	2103      	movs	r1, #3
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff ff12 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000818:	2103      	movs	r1, #3
 800081a:	2004      	movs	r0, #4
 800081c:	f7ff ff0e 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000820:	2102      	movs	r1, #2
 8000822:	2005      	movs	r0, #5
 8000824:	f7ff ff0a 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000828:	210f      	movs	r1, #15
 800082a:	2006      	movs	r0, #6
 800082c:	f7ff ff06 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000830:	210e      	movs	r1, #14
 8000832:	2007      	movs	r0, #7
 8000834:	f7ff ff02 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000838:	2100      	movs	r1, #0
 800083a:	2008      	movs	r0, #8
 800083c:	f7ff fefe 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000840:	2100      	movs	r1, #0
 8000842:	2009      	movs	r0, #9
 8000844:	f7ff fefa 	bl	800063c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000848:	23e7      	movs	r3, #231	; 0xe7
 800084a:	733b      	strb	r3, [r7, #12]
 800084c:	23e7      	movs	r3, #231	; 0xe7
 800084e:	72fb      	strb	r3, [r7, #11]
 8000850:	23e7      	movs	r3, #231	; 0xe7
 8000852:	72bb      	strb	r3, [r7, #10]
 8000854:	23e7      	movs	r3, #231	; 0xe7
 8000856:	727b      	strb	r3, [r7, #9]
 8000858:	23e7      	movs	r3, #231	; 0xe7
 800085a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2205      	movs	r2, #5
 8000862:	4619      	mov	r1, r3
 8000864:	200a      	movs	r0, #10
 8000866:	f7ff ff0b 	bl	8000680 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800086a:	23c2      	movs	r3, #194	; 0xc2
 800086c:	733b      	strb	r3, [r7, #12]
 800086e:	23c2      	movs	r3, #194	; 0xc2
 8000870:	72fb      	strb	r3, [r7, #11]
 8000872:	23c2      	movs	r3, #194	; 0xc2
 8000874:	72bb      	strb	r3, [r7, #10]
 8000876:	23c2      	movs	r3, #194	; 0xc2
 8000878:	727b      	strb	r3, [r7, #9]
 800087a:	23c2      	movs	r3, #194	; 0xc2
 800087c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2205      	movs	r2, #5
 8000884:	4619      	mov	r1, r3
 8000886:	200b      	movs	r0, #11
 8000888:	f7ff fefa 	bl	8000680 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800088c:	21c3      	movs	r1, #195	; 0xc3
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff fed4 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000894:	21c4      	movs	r1, #196	; 0xc4
 8000896:	200d      	movs	r0, #13
 8000898:	f7ff fed0 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800089c:	21c5      	movs	r1, #197	; 0xc5
 800089e:	200e      	movs	r0, #14
 80008a0:	f7ff fecc 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008a4:	21c6      	movs	r1, #198	; 0xc6
 80008a6:	200f      	movs	r0, #15
 80008a8:	f7ff fec8 	bl	800063c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008ac:	23e7      	movs	r3, #231	; 0xe7
 80008ae:	733b      	strb	r3, [r7, #12]
 80008b0:	23e7      	movs	r3, #231	; 0xe7
 80008b2:	72fb      	strb	r3, [r7, #11]
 80008b4:	23e7      	movs	r3, #231	; 0xe7
 80008b6:	72bb      	strb	r3, [r7, #10]
 80008b8:	23e7      	movs	r3, #231	; 0xe7
 80008ba:	727b      	strb	r3, [r7, #9]
 80008bc:	23e7      	movs	r3, #231	; 0xe7
 80008be:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2205      	movs	r2, #5
 80008c6:	4619      	mov	r1, r3
 80008c8:	2010      	movs	r0, #16
 80008ca:	f7ff fed9 	bl	8000680 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2011      	movs	r0, #17
 80008d2:	f7ff feb3 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2012      	movs	r0, #18
 80008da:	f7ff feaf 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2013      	movs	r0, #19
 80008e2:	f7ff feab 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2014      	movs	r0, #20
 80008ea:	f7ff fea7 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80008ee:	2100      	movs	r1, #0
 80008f0:	2015      	movs	r0, #21
 80008f2:	f7ff fea3 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2016      	movs	r0, #22
 80008fa:	f7ff fe9f 	bl	800063c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80008fe:	f000 fb13 	bl	8000f28 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	201c      	movs	r0, #28
 8000906:	f7ff fe99 	bl	800063c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800090a:	2100      	movs	r1, #0
 800090c:	201d      	movs	r0, #29
 800090e:	f7ff fe95 	bl	800063c <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000912:	210f      	movs	r1, #15
 8000914:	200f      	movs	r0, #15
 8000916:	f000 f8cd 	bl	8000ab4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f9b3 	bl	8000c86 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 f9e9 	bl	8000cf8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000926:	2002      	movs	r0, #2
 8000928:	f000 fa2c 	bl	8000d84 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800092c:	f000 f97e 	bl	8000c2c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000930:	2020      	movs	r0, #32
 8000932:	f000 f8ef 	bl	8000b14 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000936:	f000 faee 	bl	8000f16 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800093a:	204c      	movs	r0, #76	; 0x4c
 800093c:	f000 f8d5 	bl	8000aea <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000940:	f7ff ff18 	bl	8000774 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000944:	f7ff ff1e 	bl	8000784 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000948:	f000 fa44 	bl	8000dd4 <NRF24_powerDown>
	
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000956:	b002      	add	sp, #8
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000040 	.word	0x20000040
 8000960:	20000038 	.word	0x20000038
 8000964:	2000003c 	.word	0x2000003c
 8000968:	2000003e 	.word	0x2000003e

0800096c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fdf5 	bl	8000560 <NRF24_ce>
	NRF24_flush_tx();
 8000976:	f7ff fefd 	bl	8000774 <NRF24_flush_tx>
	NRF24_flush_rx();
 800097a:	f7ff ff03 	bl	8000784 <NRF24_flush_rx>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000990:	f000 fac1 	bl	8000f16 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	4619      	mov	r1, r3
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 fa5a 	bl	8000e52 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800099e:	f002 fcf1 	bl	8003384 <HAL_GetTick>
 80009a2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009a4:	230a      	movs	r3, #10
 80009a6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80009a8:	f107 030d 	add.w	r3, r7, #13
 80009ac:	2201      	movs	r2, #1
 80009ae:	4619      	mov	r1, r3
 80009b0:	2008      	movs	r0, #8
 80009b2:	f7ff fe1b 	bl	80005ec <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80009b6:	f7ff feed 	bl	8000794 <NRF24_get_status>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d107      	bne.n	80009d8 <NRF24_write+0x54>
 80009c8:	f002 fcdc 	bl	8003384 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8e7      	bhi.n	80009a8 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80009d8:	f107 010b 	add.w	r1, r7, #11
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <NRF24_write+0x90>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa64 	bl	8000eb0 <NRF24_whatHappened>
	retStatus = tx_ok;
 80009e8:	7b3b      	ldrb	r3, [r7, #12]
 80009ea:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <NRF24_write+0x90>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80009f4:	f000 f8b2 	bl	8000b5c <NRF24_getDynamicPayloadSize>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <NRF24_write+0x94>)
 80009fe:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a00:	f000 f80c 	bl	8000a1c <NRF24_available>
	NRF24_flush_tx();
 8000a04:	f7ff feb6 	bl	8000774 <NRF24_flush_tx>
	return retStatus;
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000030 	.word	0x20000030
 8000a18:	20000031 	.word	0x20000031

08000a1c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 f9e6 	bl	8000df2 <NRF24_availablePipe>
 8000a26:	4603      	mov	r3, r0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe69 	bl	8000714 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000a42:	2017      	movs	r0, #23
 8000a44:	f7ff fdaa 	bl	800059c <NRF24_read_register>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000a50:	f7ff fe98 	bl	8000784 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000a54:	f000 f882 	bl	8000b5c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf14      	ite	ne
 8000a5e:	2301      	movne	r3, #1
 8000a60:	2300      	moveq	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a76:	463b      	mov	r3, r7
 8000a78:	2205      	movs	r2, #5
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f7ff fdff 	bl	8000680 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a82:	463b      	mov	r3, r7
 8000a84:	2205      	movs	r2, #5
 8000a86:	4619      	mov	r1, r3
 8000a88:	2010      	movs	r0, #16
 8000a8a:	f7ff fdf9 	bl	8000680 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <NRF24_openWritingPipe+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	bf28      	it	cs
 8000a9c:	4613      	movcs	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2011      	movs	r0, #17
 8000aa4:	f7ff fdca 	bl	800063c <NRF24_write_register>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000032 	.word	0x20000032

08000ab4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	b25a      	sxtb	r2, r3
 8000aca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff fdad 	bl	800063c <NRF24_write_register>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000af4:	237f      	movs	r3, #127	; 0x7f
 8000af6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000af8:	7bfa      	ldrb	r2, [r7, #15]
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4293      	cmp	r3, r2
 8000afe:	bf28      	it	cs
 8000b00:	4613      	movcs	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	2005      	movs	r0, #5
 8000b08:	f7ff fd98 	bl	800063c <NRF24_write_register>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b1e:	2320      	movs	r3, #32
 8000b20:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b22:	7bfa      	ldrb	r2, [r7, #15]
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	bf28      	it	cs
 8000b2a:	4613      	movcs	r3, r2
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <NRF24_setPayloadSize+0x2c>)
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000032 	.word	0x20000032

08000b44 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	return payload_size;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <NRF24_getPayloadSize+0x14>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000032 	.word	0x20000032

08000b5c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b60:	2060      	movs	r0, #96	; 0x60
 8000b62:	f7ff fd1b 	bl	800059c <NRF24_read_register>
 8000b66:	4603      	mov	r3, r0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000b70:	201d      	movs	r0, #29
 8000b72:	f7ff fd13 	bl	800059c <NRF24_read_register>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f043 0306 	orr.w	r3, r3, #6
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	201d      	movs	r0, #29
 8000b82:	f7ff fd5b 	bl	800063c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000b86:	201d      	movs	r0, #29
 8000b88:	f7ff fd08 	bl	800059c <NRF24_read_register>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10c      	bne.n	8000bac <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000b92:	f000 f9c9 	bl	8000f28 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000b96:	201d      	movs	r0, #29
 8000b98:	f7ff fd00 	bl	800059c <NRF24_read_register>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f043 0306 	orr.w	r3, r3, #6
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	201d      	movs	r0, #29
 8000ba8:	f7ff fd48 	bl	800063c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000bac:	201c      	movs	r0, #28
 8000bae:	f7ff fcf5 	bl	800059c <NRF24_read_register>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f043 0303 	orr.w	r3, r3, #3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	201c      	movs	r0, #28
 8000bbe:	f7ff fd3d 	bl	800063c <NRF24_write_register>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000bcc:	201d      	movs	r0, #29
 8000bce:	f7ff fce5 	bl	800059c <NRF24_read_register>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	201d      	movs	r0, #29
 8000bde:	f7ff fd2d 	bl	800063c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000be2:	201d      	movs	r0, #29
 8000be4:	f7ff fcda 	bl	800059c <NRF24_read_register>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10c      	bne.n	8000c08 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000bee:	f000 f99b 	bl	8000f28 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000bf2:	201d      	movs	r0, #29
 8000bf4:	f7ff fcd2 	bl	800059c <NRF24_read_register>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	201d      	movs	r0, #29
 8000c04:	f7ff fd1a 	bl	800063c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000c08:	201c      	movs	r0, #28
 8000c0a:	f7ff fcc7 	bl	800059c <NRF24_read_register>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	201c      	movs	r0, #28
 8000c1a:	f7ff fd0f 	bl	800063c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000c1e:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <NRF24_enableDynamicPayloads+0x60>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
	
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000033 	.word	0x20000033

08000c2c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000c30:	201d      	movs	r0, #29
 8000c32:	f7ff fcb3 	bl	800059c <NRF24_read_register>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f023 0304 	bic.w	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	201d      	movs	r0, #29
 8000c42:	f7ff fcfb 	bl	800063c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f7ff fcf7 	bl	800063c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000c4e:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <NRF24_disableDynamicPayloads+0x2c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000033 	.word	0x20000033

08000c5c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000c6c:	213f      	movs	r1, #63	; 0x3f
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fce4 	bl	800063c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000c74:	e003      	b.n	8000c7e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fcdf 	bl	800063c <NRF24_write_register>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fc83 	bl	800059c <NRF24_read_register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f023 0306 	bic.w	r3, r3, #6
 8000ca0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d104      	bne.n	8000cb2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 0306 	orr.w	r3, r3, #6
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e019      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d104      	bne.n	8000cc2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e011      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e009      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d103      	bne.n	8000ce6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f043 0306 	orr.w	r3, r3, #6
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2006      	movs	r0, #6
 8000cec:	f7ff fca6 	bl	800063c <NRF24_write_register>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d06:	2006      	movs	r0, #6
 8000d08:	f7ff fc48 	bl	800059c <NRF24_read_register>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d1c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d107      	bne.n	8000d34 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	73bb      	strb	r3, [r7, #14]
 8000d32:	e00d      	b.n	8000d50 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d107      	bne.n	8000d4a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	73bb      	strb	r3, [r7, #14]
 8000d48:	e002      	b.n	8000d50 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2006      	movs	r0, #6
 8000d56:	f7ff fc71 	bl	800063c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fc1e 	bl	800059c <NRF24_read_register>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d102      	bne.n	8000d70 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e002      	b.n	8000d76 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000034 	.word	0x20000034

08000d84 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fc04 	bl	800059c <NRF24_read_register>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f023 030c 	bic.w	r3, r3, #12
 8000d9a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00f      	beq.n	8000dc2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d104      	bne.n	8000db2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e007      	b.n	8000dc2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fc38 	bl	800063c <NRF24_write_register>
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fbdf 	bl	800059c <NRF24_read_register>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f023 0302 	bic.w	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fc27 	bl	800063c <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000dfa:	f7ff fccb 	bl	8000794 <NRF24_get_status>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d017      	beq.n	8000e48 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	2007      	movs	r0, #7
 8000e32:	f7ff fc03 	bl	800063c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000e40:	2120      	movs	r1, #32
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff fbfa 	bl	800063c <NRF24_write_register>
    }
  }
  return result;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fb7e 	bl	8000560 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fb99 	bl	800059c <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fbde 	bl	800063c <NRF24_write_register>
  NRF24_ce(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fb6d 	bl	8000560 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e86:	2096      	movs	r0, #150	; 0x96
 8000e88:	f7ff fb28 	bl	80004dc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fc1d 	bl	80006d0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fb62 	bl	8000560 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff fb1d 	bl	80004dc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fb5c 	bl	8000560 <NRF24_ce>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ebc:	f7ff fc6a 	bl	8000794 <NRF24_get_status>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eca:	2170      	movs	r1, #112	; 0x70
 8000ecc:	2007      	movs	r0, #7
 8000ece:	f7ff fbb5 	bl	800063c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bf14      	ite	ne
 8000ef0:	2301      	movne	r3, #1
 8000ef2:	2300      	moveq	r3, #0
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf14      	ite	ne
 8000f04:	2301      	movne	r3, #1
 8000f06:	2300      	moveq	r3, #0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000f1a:	2170      	movs	r1, #112	; 0x70
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f7ff fb8d 	bl	800063c <NRF24_write_register>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff faf6 	bl	8000520 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000f34:	2350      	movs	r3, #80	; 0x50
 8000f36:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000f38:	2373      	movs	r3, #115	; 0x73
 8000f3a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2202      	movs	r2, #2
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <NRF24_ACTIVATE_cmd+0x30>)
 8000f44:	f003 fea3 	bl	8004c8e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fae9 	bl	8000520 <NRF24_csn>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000040 	.word	0x20000040

08000f5c <ADC_Select_CH4>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ADC_ChannelConfTypeDef sConfigPrivate = {0};

void ADC_Select_CH4 (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f76:	2306      	movs	r3, #6
 8000f78:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <ADC_Select_CH4+0x3c>)
 8000f80:	f002 fbf4 	bl	800376c <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 8000f8a:	f001 feb3 	bl	8002cf4 <Error_Handler>
	  }
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000e8 	.word	0x200000e8

08000f9c <ADC_Select_CH5>:

void ADC_Select_CH5 (void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <ADC_Select_CH5+0x3c>)
 8000fc0:	f002 fbd4 	bl	800376c <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <ADC_Select_CH5+0x32>
	  {
	    Error_Handler();
 8000fca:	f001 fe93 	bl	8002cf4 <Error_Handler>
	  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000e8 	.word	0x200000e8

08000fdc <ADC_Select_CH6>:
void ADC_Select_CH6 (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <ADC_Select_CH6+0x3c>)
 8001000:	f002 fbb4 	bl	800376c <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <ADC_Select_CH6+0x32>
	  {
	    Error_Handler();
 800100a:	f001 fe73 	bl	8002cf4 <Error_Handler>
	  }
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000e8 	.word	0x200000e8

0800101c <ADC_Select_CH7>:
void ADC_Select_CH7 (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 800102e:	2307      	movs	r3, #7
 8001030:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001036:	2306      	movs	r3, #6
 8001038:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <ADC_Select_CH7+0x3c>)
 8001040:	f002 fb94 	bl	800376c <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ADC_Select_CH7+0x32>
	  {
	    Error_Handler();
 800104a:	f001 fe53 	bl	8002cf4 <Error_Handler>
	  }
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000e8 	.word	0x200000e8

0800105c <ADC_Select_CH8>:
void ADC_Select_CH8 (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 800106e:	2308      	movs	r3, #8
 8001070:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001076:	2306      	movs	r3, #6
 8001078:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <ADC_Select_CH8+0x3c>)
 8001080:	f002 fb74 	bl	800376c <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <ADC_Select_CH8+0x32>
	  {
	    Error_Handler();
 800108a:	f001 fe33 	bl	8002cf4 <Error_Handler>
	  }
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000e8 	.word	0x200000e8

0800109c <ADC_Select_CH9>:

void ADC_Select_CH9 (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_9;
 80010ae:	2309      	movs	r3, #9
 80010b0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010b6:	2306      	movs	r3, #6
 80010b8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <ADC_Select_CH9+0x3c>)
 80010c0:	f002 fb54 	bl	800376c <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <ADC_Select_CH9+0x32>
	  {
	    Error_Handler();
 80010ca:	f001 fe13 	bl	8002cf4 <Error_Handler>
	  }
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000e8 	.word	0x200000e8

080010dc <ADC_Select_CH10>:
void ADC_Select_CH10 (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_10;
 80010ee:	230a      	movs	r3, #10
 80010f0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010f6:	2306      	movs	r3, #6
 80010f8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <ADC_Select_CH10+0x3c>)
 8001100:	f002 fb34 	bl	800376c <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <ADC_Select_CH10+0x32>
	  {
	    Error_Handler();
 800110a:	f001 fdf3 	bl	8002cf4 <Error_Handler>
	  }
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000e8 	.word	0x200000e8

0800111c <ADC_Select_CH11>:
void ADC_Select_CH11 (void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 800112e:	230b      	movs	r3, #11
 8001130:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001136:	2306      	movs	r3, #6
 8001138:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <ADC_Select_CH11+0x3c>)
 8001140:	f002 fb14 	bl	800376c <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <ADC_Select_CH11+0x32>
	  {
	    Error_Handler();
 800114a:	f001 fdd3 	bl	8002cf4 <Error_Handler>
	  }
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000e8 	.word	0x200000e8

0800115c <ADC_Select_CH12>:
void ADC_Select_CH12 (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_12;
 800116e:	230c      	movs	r3, #12
 8001170:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001176:	2306      	movs	r3, #6
 8001178:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <ADC_Select_CH12+0x3c>)
 8001180:	f002 faf4 	bl	800376c <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <ADC_Select_CH12+0x32>
	  {
	    Error_Handler();
 800118a:	f001 fdb3 	bl	8002cf4 <Error_Handler>
	  }
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000e8 	.word	0x200000e8

0800119c <ADC_Select_CH13>:
void ADC_Select_CH13 (void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_13;
 80011ae:	230d      	movs	r3, #13
 80011b0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <ADC_Select_CH13+0x3c>)
 80011c0:	f002 fad4 	bl	800376c <HAL_ADC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <ADC_Select_CH13+0x32>
	  {
	    Error_Handler();
 80011ca:	f001 fd93 	bl	8002cf4 <Error_Handler>
	  }
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000e8 	.word	0x200000e8

080011dc <ADC_Select_CH14>:
void ADC_Select_CH14 (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 80011ee:	230e      	movs	r3, #14
 80011f0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80011f6:	2306      	movs	r3, #6
 80011f8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <ADC_Select_CH14+0x3c>)
 8001200:	f002 fab4 	bl	800376c <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <ADC_Select_CH14+0x32>
	  {
	    Error_Handler();
 800120a:	f001 fd73 	bl	8002cf4 <Error_Handler>
	  }
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000e8 	.word	0x200000e8

0800121c <ADC_Select_CH15>:
void ADC_Select_CH15 (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 800122e:	230f      	movs	r3, #15
 8001230:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001236:	2306      	movs	r3, #6
 8001238:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <ADC_Select_CH15+0x3c>)
 8001240:	f002 fa94 	bl	800376c <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <ADC_Select_CH15+0x32>
	  {
	    Error_Handler();
 800124a:	f001 fd53 	bl	8002cf4 <Error_Handler>
	  }
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000e8 	.word	0x200000e8

0800125c <Read_Adc>:
void Read_Adc(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

		  ADC_Select_CH4();
 8001260:	f7ff fe7c 	bl	8000f5c <ADC_Select_CH4>
		  HAL_ADC_Start(&hadc1);
 8001264:	488f      	ldr	r0, [pc, #572]	; (80014a4 <Read_Adc+0x248>)
 8001266:	f002 f901 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800126a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126e:	488d      	ldr	r0, [pc, #564]	; (80014a4 <Read_Adc+0x248>)
 8001270:	f002 f9e3 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_1 = HAL_ADC_GetValue(&hadc1) / 17;
 8001274:	488b      	ldr	r0, [pc, #556]	; (80014a4 <Read_Adc+0x248>)
 8001276:	f002 fa6b 	bl	8003750 <HAL_ADC_GetValue>
 800127a:	4603      	mov	r3, r0
 800127c:	4a8a      	ldr	r2, [pc, #552]	; (80014a8 <Read_Adc+0x24c>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <Read_Adc+0x250>)
 8001288:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 800128a:	4886      	ldr	r0, [pc, #536]	; (80014a4 <Read_Adc+0x248>)
 800128c:	f002 f9a2 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH5();
 8001290:	f7ff fe84 	bl	8000f9c <ADC_Select_CH5>
		  HAL_ADC_Start(&hadc1);
 8001294:	4883      	ldr	r0, [pc, #524]	; (80014a4 <Read_Adc+0x248>)
 8001296:	f002 f8e9 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800129a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800129e:	4881      	ldr	r0, [pc, #516]	; (80014a4 <Read_Adc+0x248>)
 80012a0:	f002 f9cb 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_2 = HAL_ADC_GetValue(&hadc1) /17;
 80012a4:	487f      	ldr	r0, [pc, #508]	; (80014a4 <Read_Adc+0x248>)
 80012a6:	f002 fa53 	bl	8003750 <HAL_ADC_GetValue>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a7e      	ldr	r2, [pc, #504]	; (80014a8 <Read_Adc+0x24c>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b7d      	ldr	r3, [pc, #500]	; (80014ac <Read_Adc+0x250>)
 80012b8:	705a      	strb	r2, [r3, #1]
		  HAL_ADC_Stop(&hadc1);
 80012ba:	487a      	ldr	r0, [pc, #488]	; (80014a4 <Read_Adc+0x248>)
 80012bc:	f002 f98a 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH6();
 80012c0:	f7ff fe8c 	bl	8000fdc <ADC_Select_CH6>
		  HAL_ADC_Start(&hadc1);
 80012c4:	4877      	ldr	r0, [pc, #476]	; (80014a4 <Read_Adc+0x248>)
 80012c6:	f002 f8d1 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ce:	4875      	ldr	r0, [pc, #468]	; (80014a4 <Read_Adc+0x248>)
 80012d0:	f002 f9b3 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_3 = HAL_ADC_GetValue(&hadc1) / 17;
 80012d4:	4873      	ldr	r0, [pc, #460]	; (80014a4 <Read_Adc+0x248>)
 80012d6:	f002 fa3b 	bl	8003750 <HAL_ADC_GetValue>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a72      	ldr	r2, [pc, #456]	; (80014a8 <Read_Adc+0x24c>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b71      	ldr	r3, [pc, #452]	; (80014ac <Read_Adc+0x250>)
 80012e8:	709a      	strb	r2, [r3, #2]
		  HAL_ADC_Stop(&hadc1);
 80012ea:	486e      	ldr	r0, [pc, #440]	; (80014a4 <Read_Adc+0x248>)
 80012ec:	f002 f972 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH7();
 80012f0:	f7ff fe94 	bl	800101c <ADC_Select_CH7>
		  HAL_ADC_Start(&hadc1);
 80012f4:	486b      	ldr	r0, [pc, #428]	; (80014a4 <Read_Adc+0x248>)
 80012f6:	f002 f8b9 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fe:	4869      	ldr	r0, [pc, #420]	; (80014a4 <Read_Adc+0x248>)
 8001300:	f002 f99b 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_4 = HAL_ADC_GetValue(&hadc1) / 17;
 8001304:	4867      	ldr	r0, [pc, #412]	; (80014a4 <Read_Adc+0x248>)
 8001306:	f002 fa23 	bl	8003750 <HAL_ADC_GetValue>
 800130a:	4603      	mov	r3, r0
 800130c:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <Read_Adc+0x24c>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <Read_Adc+0x250>)
 8001318:	70da      	strb	r2, [r3, #3]
		  HAL_ADC_Stop(&hadc1);
 800131a:	4862      	ldr	r0, [pc, #392]	; (80014a4 <Read_Adc+0x248>)
 800131c:	f002 f95a 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH8();
 8001320:	f7ff fe9c 	bl	800105c <ADC_Select_CH8>
		  HAL_ADC_Start(&hadc1);
 8001324:	485f      	ldr	r0, [pc, #380]	; (80014a4 <Read_Adc+0x248>)
 8001326:	f002 f8a1 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800132a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800132e:	485d      	ldr	r0, [pc, #372]	; (80014a4 <Read_Adc+0x248>)
 8001330:	f002 f983 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_5 = HAL_ADC_GetValue(&hadc1) / 17;
 8001334:	485b      	ldr	r0, [pc, #364]	; (80014a4 <Read_Adc+0x248>)
 8001336:	f002 fa0b 	bl	8003750 <HAL_ADC_GetValue>
 800133a:	4603      	mov	r3, r0
 800133c:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <Read_Adc+0x24c>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b59      	ldr	r3, [pc, #356]	; (80014ac <Read_Adc+0x250>)
 8001348:	711a      	strb	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 800134a:	4856      	ldr	r0, [pc, #344]	; (80014a4 <Read_Adc+0x248>)
 800134c:	f002 f942 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH9();
 8001350:	f7ff fea4 	bl	800109c <ADC_Select_CH9>
		  HAL_ADC_Start(&hadc1);
 8001354:	4853      	ldr	r0, [pc, #332]	; (80014a4 <Read_Adc+0x248>)
 8001356:	f002 f889 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800135a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800135e:	4851      	ldr	r0, [pc, #324]	; (80014a4 <Read_Adc+0x248>)
 8001360:	f002 f96b 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_6 = HAL_ADC_GetValue(&hadc1) / 17;
 8001364:	484f      	ldr	r0, [pc, #316]	; (80014a4 <Read_Adc+0x248>)
 8001366:	f002 f9f3 	bl	8003750 <HAL_ADC_GetValue>
 800136a:	4603      	mov	r3, r0
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <Read_Adc+0x24c>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <Read_Adc+0x250>)
 8001378:	715a      	strb	r2, [r3, #5]
		  HAL_ADC_Stop(&hadc1);
 800137a:	484a      	ldr	r0, [pc, #296]	; (80014a4 <Read_Adc+0x248>)
 800137c:	f002 f92a 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH10();
 8001380:	f7ff feac 	bl	80010dc <ADC_Select_CH10>
		  HAL_ADC_Start(&hadc1);
 8001384:	4847      	ldr	r0, [pc, #284]	; (80014a4 <Read_Adc+0x248>)
 8001386:	f002 f871 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800138a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800138e:	4845      	ldr	r0, [pc, #276]	; (80014a4 <Read_Adc+0x248>)
 8001390:	f002 f953 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_7 = HAL_ADC_GetValue(&hadc1) / 17;
 8001394:	4843      	ldr	r0, [pc, #268]	; (80014a4 <Read_Adc+0x248>)
 8001396:	f002 f9db 	bl	8003750 <HAL_ADC_GetValue>
 800139a:	4603      	mov	r3, r0
 800139c:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <Read_Adc+0x24c>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <Read_Adc+0x250>)
 80013a8:	719a      	strb	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 80013aa:	483e      	ldr	r0, [pc, #248]	; (80014a4 <Read_Adc+0x248>)
 80013ac:	f002 f912 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH11();
 80013b0:	f7ff feb4 	bl	800111c <ADC_Select_CH11>
		  HAL_ADC_Start(&hadc1);
 80013b4:	483b      	ldr	r0, [pc, #236]	; (80014a4 <Read_Adc+0x248>)
 80013b6:	f002 f859 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80013ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013be:	4839      	ldr	r0, [pc, #228]	; (80014a4 <Read_Adc+0x248>)
 80013c0:	f002 f93b 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_8 = HAL_ADC_GetValue(&hadc1) / 17;
 80013c4:	4837      	ldr	r0, [pc, #220]	; (80014a4 <Read_Adc+0x248>)
 80013c6:	f002 f9c3 	bl	8003750 <HAL_ADC_GetValue>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <Read_Adc+0x24c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <Read_Adc+0x250>)
 80013d8:	71da      	strb	r2, [r3, #7]
		  HAL_ADC_Stop(&hadc1);
 80013da:	4832      	ldr	r0, [pc, #200]	; (80014a4 <Read_Adc+0x248>)
 80013dc:	f002 f8fa 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH12();
 80013e0:	f7ff febc 	bl	800115c <ADC_Select_CH12>
		  HAL_ADC_Start(&hadc1);
 80013e4:	482f      	ldr	r0, [pc, #188]	; (80014a4 <Read_Adc+0x248>)
 80013e6:	f002 f841 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80013ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <Read_Adc+0x248>)
 80013f0:	f002 f923 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_9 = HAL_ADC_GetValue(&hadc1) / 17;
 80013f4:	482b      	ldr	r0, [pc, #172]	; (80014a4 <Read_Adc+0x248>)
 80013f6:	f002 f9ab 	bl	8003750 <HAL_ADC_GetValue>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <Read_Adc+0x24c>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <Read_Adc+0x250>)
 8001408:	721a      	strb	r2, [r3, #8]
		  HAL_ADC_Stop(&hadc1);
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <Read_Adc+0x248>)
 800140c:	f002 f8e2 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH13();
 8001410:	f7ff fec4 	bl	800119c <ADC_Select_CH13>
		  HAL_ADC_Start(&hadc1);
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <Read_Adc+0x248>)
 8001416:	f002 f829 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800141a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <Read_Adc+0x248>)
 8001420:	f002 f90b 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_10 = HAL_ADC_GetValue(&hadc1) / 17;
 8001424:	481f      	ldr	r0, [pc, #124]	; (80014a4 <Read_Adc+0x248>)
 8001426:	f002 f993 	bl	8003750 <HAL_ADC_GetValue>
 800142a:	4603      	mov	r3, r0
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <Read_Adc+0x24c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <Read_Adc+0x250>)
 8001438:	725a      	strb	r2, [r3, #9]
		  HAL_ADC_Stop(&hadc1);
 800143a:	481a      	ldr	r0, [pc, #104]	; (80014a4 <Read_Adc+0x248>)
 800143c:	f002 f8ca 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH14();
 8001440:	f7ff fecc 	bl	80011dc <ADC_Select_CH14>
		  HAL_ADC_Start(&hadc1);
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <Read_Adc+0x248>)
 8001446:	f002 f811 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800144a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <Read_Adc+0x248>)
 8001450:	f002 f8f3 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_11 = HAL_ADC_GetValue(&hadc1) / 17;
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <Read_Adc+0x248>)
 8001456:	f002 f97b 	bl	8003750 <HAL_ADC_GetValue>
 800145a:	4603      	mov	r3, r0
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <Read_Adc+0x24c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <Read_Adc+0x250>)
 8001468:	729a      	strb	r2, [r3, #10]
		  HAL_ADC_Stop(&hadc1);
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <Read_Adc+0x248>)
 800146c:	f002 f8b2 	bl	80035d4 <HAL_ADC_Stop>

		  ADC_Select_CH15();
 8001470:	f7ff fed4 	bl	800121c <ADC_Select_CH15>
		  HAL_ADC_Start(&hadc1);
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <Read_Adc+0x248>)
 8001476:	f001 fff9 	bl	800346c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800147a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <Read_Adc+0x248>)
 8001480:	f002 f8db 	bl	800363a <HAL_ADC_PollForConversion>
		  data.POT_12 = HAL_ADC_GetValue(&hadc1) / 17;
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <Read_Adc+0x248>)
 8001486:	f002 f963 	bl	8003750 <HAL_ADC_GetValue>
 800148a:	4603      	mov	r3, r0
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <Read_Adc+0x24c>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <Read_Adc+0x250>)
 8001498:	72da      	strb	r2, [r3, #11]
		  HAL_ADC_Stop(&hadc1);
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <Read_Adc+0x248>)
 800149c:	f002 f89a 	bl	80035d4 <HAL_ADC_Stop>





		  }
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000e8 	.word	0x200000e8
 80014a8:	f0f0f0f1 	.word	0xf0f0f0f1
 80014ac:	200000d8 	.word	0x200000d8

080014b0 <Compute_PWM>:

void Compute_PWM(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
	memcpy(ADC_DEGER,&data,12);
 80014b6:	220c      	movs	r2, #12
 80014b8:	498f      	ldr	r1, [pc, #572]	; (80016f8 <Compute_PWM+0x248>)
 80014ba:	4890      	ldr	r0, [pc, #576]	; (80016fc <Compute_PWM+0x24c>)
 80014bc:	f005 fcf2 	bl	8006ea4 <memcpy>
	FILTERED_PWM[0] = IIR_FILTER_CH4(ADC_DEGER[0]);
 80014c0:	4b8e      	ldr	r3, [pc, #568]	; (80016fc <Compute_PWM+0x24c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f000 fe10 	bl	80020f4 <IIR_FILTER_CH4>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b86      	ldr	r3, [pc, #536]	; (8001700 <Compute_PWM+0x250>)
 80014e6:	701a      	strb	r2, [r3, #0]
	FILTERED_PWM[1] = IIR_FILTER_CH5(ADC_DEGER[1]);
 80014e8:	4b84      	ldr	r3, [pc, #528]	; (80016fc <Compute_PWM+0x24c>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	f000 fe7c 	bl	80021f4 <IIR_FILTER_CH5>
 80014fc:	eef0 7a40 	vmov.f32	s15, s0
 8001500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001504:	edc7 7a01 	vstr	s15, [r7, #4]
 8001508:	793b      	ldrb	r3, [r7, #4]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <Compute_PWM+0x250>)
 800150e:	705a      	strb	r2, [r3, #1]
	FILTERED_PWM[2] = IIR_FILTER_CH6(ADC_DEGER[2]);
 8001510:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <Compute_PWM+0x24c>)
 8001512:	789b      	ldrb	r3, [r3, #2]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f000 fee8 	bl	80022f4 <IIR_FILTER_CH6>
 8001524:	eef0 7a40 	vmov.f32	s15, s0
 8001528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001530:	793b      	ldrb	r3, [r7, #4]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b72      	ldr	r3, [pc, #456]	; (8001700 <Compute_PWM+0x250>)
 8001536:	709a      	strb	r2, [r3, #2]
	FILTERED_PWM[3] = IIR_FILTER_CH7(ADC_DEGER[3]);
 8001538:	4b70      	ldr	r3, [pc, #448]	; (80016fc <Compute_PWM+0x24c>)
 800153a:	78db      	ldrb	r3, [r3, #3]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f000 ff54 	bl	80023f4 <IIR_FILTER_CH7>
 800154c:	eef0 7a40 	vmov.f32	s15, s0
 8001550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001554:	edc7 7a01 	vstr	s15, [r7, #4]
 8001558:	793b      	ldrb	r3, [r7, #4]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b68      	ldr	r3, [pc, #416]	; (8001700 <Compute_PWM+0x250>)
 800155e:	70da      	strb	r2, [r3, #3]
	FILTERED_PWM[4] = IIR_FILTER_CH8(ADC_DEGER[4]);
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <Compute_PWM+0x24c>)
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	f000 ffc0 	bl	80024f4 <IIR_FILTER_CH8>
 8001574:	eef0 7a40 	vmov.f32	s15, s0
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001580:	793b      	ldrb	r3, [r7, #4]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <Compute_PWM+0x250>)
 8001586:	711a      	strb	r2, [r3, #4]
	FILTERED_PWM[5] = IIR_FILTER_CH9(ADC_DEGER[5]);
 8001588:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <Compute_PWM+0x24c>)
 800158a:	795b      	ldrb	r3, [r3, #5]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	f001 f82c 	bl	80025f4 <IIR_FILTER_CH9>
 800159c:	eef0 7a40 	vmov.f32	s15, s0
 80015a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80015a8:	793b      	ldrb	r3, [r7, #4]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b54      	ldr	r3, [pc, #336]	; (8001700 <Compute_PWM+0x250>)
 80015ae:	715a      	strb	r2, [r3, #5]
	FILTERED_PWM[6] = IIR_FILTER_CH10(ADC_DEGER[6]);
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <Compute_PWM+0x24c>)
 80015b2:	799b      	ldrb	r3, [r3, #6]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	f001 f898 	bl	80026f4 <IIR_FILTER_CH10>
 80015c4:	eef0 7a40 	vmov.f32	s15, s0
 80015c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <Compute_PWM+0x250>)
 80015d6:	719a      	strb	r2, [r3, #6]
	FILTERED_PWM[7] = IIR_FILTER_CH11(ADC_DEGER[7]);
 80015d8:	4b48      	ldr	r3, [pc, #288]	; (80016fc <Compute_PWM+0x24c>)
 80015da:	79db      	ldrb	r3, [r3, #7]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	f001 f904 	bl	80027f4 <IIR_FILTER_CH11>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80015f8:	793b      	ldrb	r3, [r7, #4]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <Compute_PWM+0x250>)
 80015fe:	71da      	strb	r2, [r3, #7]
	FILTERED_PWM[8] = IIR_FILTER_CH12(ADC_DEGER[8]);
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <Compute_PWM+0x24c>)
 8001602:	7a1b      	ldrb	r3, [r3, #8]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	f001 f970 	bl	80028f4 <IIR_FILTER_CH12>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001620:	793b      	ldrb	r3, [r7, #4]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <Compute_PWM+0x250>)
 8001626:	721a      	strb	r2, [r3, #8]
	FILTERED_PWM[9] = IIR_FILTER_CH13(ADC_DEGER[9]);
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <Compute_PWM+0x24c>)
 800162a:	7a5b      	ldrb	r3, [r3, #9]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	f001 f9dc 	bl	80029f4 <IIR_FILTER_CH13>
 800163c:	eef0 7a40 	vmov.f32	s15, s0
 8001640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001644:	edc7 7a01 	vstr	s15, [r7, #4]
 8001648:	793b      	ldrb	r3, [r7, #4]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <Compute_PWM+0x250>)
 800164e:	725a      	strb	r2, [r3, #9]
	FILTERED_PWM[10]= IIR_FILTER_CH14(ADC_DEGER[10]);
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <Compute_PWM+0x24c>)
 8001652:	7a9b      	ldrb	r3, [r3, #10]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	f001 fa48 	bl	8002af4 <IIR_FILTER_CH14>
 8001664:	eef0 7a40 	vmov.f32	s15, s0
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001670:	793b      	ldrb	r3, [r7, #4]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <Compute_PWM+0x250>)
 8001676:	729a      	strb	r2, [r3, #10]
	FILTERED_PWM[11]= IIR_FILTER_CH15(ADC_DEGER[11]);
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <Compute_PWM+0x24c>)
 800167a:	7adb      	ldrb	r3, [r3, #11]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	f001 fab4 	bl	8002bf4 <IIR_FILTER_CH15>
 800168c:	eef0 7a40 	vmov.f32	s15, s0
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	edc7 7a01 	vstr	s15, [r7, #4]
 8001698:	793b      	ldrb	r3, [r7, #4]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <Compute_PWM+0x250>)
 800169e:	72da      	strb	r2, [r3, #11]
	for(int i = 0 ; i<=11 ; i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e018      	b.n	80016d8 <Compute_PWM+0x228>
	if( FILTERED_PWM[i] <= 33){
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <Compute_PWM+0x250>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b21      	cmp	r3, #33	; 0x21
 80016b0:	d804      	bhi.n	80016bc <Compute_PWM+0x20c>
		FILTERED_PWM[i] = 33;
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <Compute_PWM+0x250>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	2221      	movs	r2, #33	; 0x21
 80016ba:	701a      	strb	r2, [r3, #0]
		}
	if(FILTERED_PWM[i] >= 220){
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <Compute_PWM+0x250>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2bdb      	cmp	r3, #219	; 0xdb
 80016c6:	d904      	bls.n	80016d2 <Compute_PWM+0x222>
		FILTERED_PWM[i] = 220;
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <Compute_PWM+0x250>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	22dc      	movs	r2, #220	; 0xdc
 80016d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i<=11 ; i++){
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b0b      	cmp	r3, #11
 80016dc:	dde3      	ble.n	80016a6 <Compute_PWM+0x1f6>
	}
}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, FILTERED_PWM[1]);
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <Compute_PWM+0x250>)
 80016e0:	785a      	ldrb	r2, [r3, #1]
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <Compute_PWM+0x254>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(10);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f001 fe57 	bl	800339c <HAL_Delay>





}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000d8 	.word	0x200000d8
 80016fc:	200000a4 	.word	0x200000a4
 8001700:	20000098 	.word	0x20000098
 8001704:	20000188 	.word	0x20000188

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b097      	sub	sp, #92	; 0x5c
 800170c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170e:	f001 fdd3 	bl	80032b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001712:	f000 f861 	bl	80017d8 <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001716:	f000 fc29 	bl	8001f6c <MX_GPIO_Init>
  MX_ADC1_Init();
 800171a:	f000 f8c5 	bl	80018a8 <MX_ADC1_Init>
  MX_SPI3_Init();
 800171e:	f000 f9af 	bl	8001a80 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001722:	f000 f9e3 	bl	8001aec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001726:	f000 fa89 	bl	8001c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 800172a:	f000 fb01 	bl	8001d30 <MX_TIM3_Init>
  MX_TIM4_Init();
 800172e:	f000 fb79 	bl	8001e24 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001732:	f000 fbf1 	bl	8001f18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001736:	4821      	ldr	r0, [pc, #132]	; (80017bc <main+0xb4>)
 8001738:	f001 fe98 	bl	800346c <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800173c:	2100      	movs	r1, #0
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <main+0xb8>)
 8001740:	f004 f814 	bl	800576c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001744:	2104      	movs	r1, #4
 8001746:	481e      	ldr	r0, [pc, #120]	; (80017c0 <main+0xb8>)
 8001748:	f004 f810 	bl	800576c <HAL_TIM_PWM_Start>
  //HAL_ADC_Start_DMA(&hadc1,ADC_DEGER,1);

  	//**** TRANSMIT - ACK ****//
  	NRF24_begin(GPIOD, CSNpin_Pin, CEpin_Pin, hspi3);
 800174c:	4c1d      	ldr	r4, [pc, #116]	; (80017c4 <main+0xbc>)
 800174e:	4668      	mov	r0, sp
 8001750:	1d23      	adds	r3, r4, #4
 8001752:	2254      	movs	r2, #84	; 0x54
 8001754:	4619      	mov	r1, r3
 8001756:	f005 fba5 	bl	8006ea4 <memcpy>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001760:	2104      	movs	r1, #4
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <main+0xc0>)
 8001764:	f7ff f824 	bl	80007b0 <NRF24_begin>
  	NRF24_stopListening();
 8001768:	f7ff f900 	bl	800096c <NRF24_stopListening>
  	NRF24_openWritingPipe(TxpipeAddrs);
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <main+0xc4>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f979 	bl	8000a6c <NRF24_openWritingPipe>
  	NRF24_setAutoAck(true);
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff fa6e 	bl	8000c5c <NRF24_setAutoAck>
  	NRF24_setChannel(52);
 8001780:	2034      	movs	r0, #52	; 0x34
 8001782:	f7ff f9b2 	bl	8000aea <NRF24_setChannel>
  	NRF24_setPayloadSize(32);
 8001786:	2020      	movs	r0, #32
 8001788:	f7ff f9c4 	bl	8000b14 <NRF24_setPayloadSize>
  	NRF24_enableDynamicPayloads();
 800178c:	f7ff fa1c 	bl	8000bc8 <NRF24_enableDynamicPayloads>
  	NRF24_enableAckPayload();
 8001790:	f7ff f9ec 	bl	8000b6c <NRF24_enableAckPayload>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Adc();
 8001794:	f7ff fd62 	bl	800125c <Read_Adc>
	  if(NRF24_write(&data,sizeof(data)))
 8001798:	210f      	movs	r1, #15
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <main+0xc8>)
 800179c:	f7ff f8f2 	bl	8000984 <NRF24_write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <main+0xa6>
	  	    {
	  			NRF24_read(AckPayload, 32);
 80017a6:	2120      	movs	r1, #32
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <main+0xcc>)
 80017aa:	f7ff f93f 	bl	8000a2c <NRF24_read>
	  		}
	  Compute_PWM();
 80017ae:	f7ff fe7f 	bl	80014b0 <Compute_PWM>

	  HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 fdf2 	bl	800339c <HAL_Delay>
	  Read_Adc();
 80017b8:	e7ec      	b.n	8001794 <main+0x8c>
 80017ba:	bf00      	nop
 80017bc:	200000e8 	.word	0x200000e8
 80017c0:	20000188 	.word	0x20000188
 80017c4:	20000130 	.word	0x20000130
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	20000000 	.word	0x20000000
 80017d0:	200000d8 	.word	0x200000d8
 80017d4:	200000b8 	.word	0x200000b8

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2230      	movs	r2, #48	; 0x30
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 fb6a 	bl	8006ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <SystemClock_Config+0xc8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <SystemClock_Config+0xc8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <SystemClock_Config+0xc8>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <SystemClock_Config+0xcc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <SystemClock_Config+0xcc>)
 8001822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <SystemClock_Config+0xcc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2310      	movs	r3, #16
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001854:	2304      	movs	r3, #4
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0320 	add.w	r3, r7, #32
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fcf5 	bl	800424c <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001868:	f001 fa44 	bl	8002cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	2103      	movs	r1, #3
 8001888:	4618      	mov	r0, r3
 800188a:	f002 ff57 	bl	800473c <HAL_RCC_ClockConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001894:	f001 fa2e 	bl	8002cf4 <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	; 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ba:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <MX_ADC1_Init+0x1d0>)
 80018be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018c0:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018ce:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e2:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018ea:	4a64      	ldr	r2, [pc, #400]	; (8001a7c <MX_ADC1_Init+0x1d4>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ee:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 80018f4:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001904:	2201      	movs	r2, #1
 8001906:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001908:	485a      	ldr	r0, [pc, #360]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 800190a:	f001 fd6b 	bl	80033e4 <HAL_ADC_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001914:	f001 f9ee 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001918:	2304      	movs	r3, #4
 800191a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001920:	2306      	movs	r3, #6
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4852      	ldr	r0, [pc, #328]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 800192a:	f001 ff1f 	bl	800376c <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001934:	f001 f9de 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001938:	2305      	movs	r3, #5
 800193a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	484b      	ldr	r0, [pc, #300]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001946:	f001 ff11 	bl	800376c <HAL_ADC_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001950:	f001 f9d0 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001954:	2306      	movs	r3, #6
 8001956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001958:	2303      	movs	r3, #3
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001962:	f001 ff03 	bl	800376c <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800196c:	f001 f9c2 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001970:	2307      	movs	r3, #7
 8001972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001974:	2304      	movs	r3, #4
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	483d      	ldr	r0, [pc, #244]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 800197e:	f001 fef5 	bl	800376c <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001988:	f001 f9b4 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800198c:	2308      	movs	r3, #8
 800198e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001990:	2305      	movs	r3, #5
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4836      	ldr	r0, [pc, #216]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 800199a:	f001 fee7 	bl	800376c <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80019a4:	f001 f9a6 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019a8:	2309      	movs	r3, #9
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80019ac:	2306      	movs	r3, #6
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	482f      	ldr	r0, [pc, #188]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80019b6:	f001 fed9 	bl	800376c <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80019c0:	f001 f998 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019c4:	230a      	movs	r3, #10
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80019c8:	2307      	movs	r3, #7
 80019ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4828      	ldr	r0, [pc, #160]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80019d2:	f001 fecb 	bl	800376c <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80019dc:	f001 f98a 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019e0:	230b      	movs	r3, #11
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80019e4:	2308      	movs	r3, #8
 80019e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4821      	ldr	r0, [pc, #132]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 80019ee:	f001 febd 	bl	800376c <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80019f8:	f001 f97c 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019fc:	230c      	movs	r3, #12
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001a00:	2309      	movs	r3, #9
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	481a      	ldr	r0, [pc, #104]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001a0a:	f001 feaf 	bl	800376c <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001a14:	f001 f96e 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a18:	230d      	movs	r3, #13
 8001a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001a26:	f001 fea1 	bl	800376c <HAL_ADC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001a30:	f001 f960 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001a34:	230e      	movs	r3, #14
 8001a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001a38:	230b      	movs	r3, #11
 8001a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001a42:	f001 fe93 	bl	800376c <HAL_ADC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001a4c:	f001 f952 	bl	8002cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a50:	230f      	movs	r3, #15
 8001a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001a54:	230c      	movs	r3, #12
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_ADC1_Init+0x1cc>)
 8001a5e:	f001 fe85 	bl	800376c <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001a68:	f001 f944 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000e8 	.word	0x200000e8
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	0f000001 	.word	0x0f000001

08001a80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <MX_SPI3_Init+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001acc:	220a      	movs	r2, #10
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_SPI3_Init+0x64>)
 8001ad2:	f003 f853 	bl	8004b7c <HAL_SPI_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001adc:	f001 f90a 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000130 	.word	0x20000130
 8001ae8:	40003c00 	.word	0x40003c00

08001aec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b092      	sub	sp, #72	; 0x48
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2220      	movs	r2, #32
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 f9d2 	bl	8006ec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b1c:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b1e:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <MX_TIM1_Init+0x14c>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1100;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b24:	f240 424c 	movw	r2, #1100	; 0x44c
 8001b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b32:	f240 7207 	movw	r2, #1799	; 0x707
 8001b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b4a:	483a      	ldr	r0, [pc, #232]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b4c:	f003 fdbe 	bl	80056cc <HAL_TIM_PWM_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b56:	f001 f8cd 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b66:	4619      	mov	r1, r3
 8001b68:	4832      	ldr	r0, [pc, #200]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b6a:	f004 f9a3 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001b74:	f001 f8be 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b78:	2360      	movs	r3, #96	; 0x60
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4825      	ldr	r0, [pc, #148]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001b9e:	f003 fe95 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001ba8:	f001 f8a4 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001bb6:	f003 fe89 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001bc0:	f001 f898 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4819      	ldr	r0, [pc, #100]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001bce:	f003 fe7d 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001bd8:	f001 f88c 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	220c      	movs	r2, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001be6:	f003 fe71 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001bf0:	f001 f880 	bl	8002cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001c18:	f004 f9ba 	bl	8005f90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001c22:	f001 f867 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM1_Init+0x148>)
 8001c28:	f001 f9b8 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 8001c2c:	bf00      	nop
 8001c2e:	3748      	adds	r7, #72	; 0x48
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000188 	.word	0x20000188
 8001c38:	40010000 	.word	0x40010000

08001c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c86:	4829      	ldr	r0, [pc, #164]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001c88:	f003 fd20 	bl	80056cc <HAL_TIM_PWM_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c92:	f001 f82f 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001ca6:	f004 f905 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001cb0:	f001 f820 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb4:	2360      	movs	r3, #96	; 0x60
 8001cb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4818      	ldr	r0, [pc, #96]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001ccc:	f003 fdfe 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cd6:	f001 f80d 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2204      	movs	r2, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001ce2:	f003 fdf3 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cec:	f001 f802 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001cf8:	f003 fde8 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001d02:	f000 fff7 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	220c      	movs	r2, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001d0e:	f003 fddd 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001d18:	f000 ffec 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM2_Init+0xf0>)
 8001d1e:	f001 f93d 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200001d0 	.word	0x200001d0

08001d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <MX_TIM3_Init+0xf0>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d78:	4828      	ldr	r0, [pc, #160]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d7a:	f003 fca7 	bl	80056cc <HAL_TIM_PWM_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d84:	f000 ffb6 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	4619      	mov	r1, r3
 8001d96:	4821      	ldr	r0, [pc, #132]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001d98:	f004 f88c 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001da2:	f000 ffa7 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da6:	2360      	movs	r3, #96	; 0x60
 8001da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4817      	ldr	r0, [pc, #92]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001dbe:	f003 fd85 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001dc8:	f000 ff94 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4812      	ldr	r0, [pc, #72]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001dd4:	f003 fd7a 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dde:	f000 ff89 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2208      	movs	r2, #8
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001dea:	f003 fd6f 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001df4:	f000 ff7e 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001e00:	f003 fd64 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001e0a:	f000 ff73 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e0e:	4803      	ldr	r0, [pc, #12]	; (8001e1c <MX_TIM3_Init+0xec>)
 8001e10:	f001 f8c4 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000218 	.word	0x20000218
 8001e20:	40000400 	.word	0x40000400

08001e24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <MX_TIM4_Init+0xf0>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e6c:	4828      	ldr	r0, [pc, #160]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e6e:	f003 fc2d 	bl	80056cc <HAL_TIM_PWM_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001e78:	f000 ff3c 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4821      	ldr	r0, [pc, #132]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001e8c:	f004 f812 	bl	8005eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001e96:	f000 ff2d 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9a:	2360      	movs	r3, #96	; 0x60
 8001e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4817      	ldr	r0, [pc, #92]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001eb2:	f003 fd0b 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ebc:	f000 ff1a 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001ec8:	f003 fd00 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001ed2:	f000 ff0f 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001ede:	f003 fcf5 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001ee8:	f000 ff04 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	220c      	movs	r2, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001ef4:	f003 fcea 	bl	80058cc <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001efe:	f000 fef9 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_TIM4_Init+0xec>)
 8001f04:	f001 f84a 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000260 	.word	0x20000260
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART6_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART6_UART_Init+0x4c>)
 8001f50:	f004 f870 	bl	8006034 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f000 fecb 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200002a8 	.word	0x200002a8
 8001f68:	40011400 	.word	0x40011400

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <MX_GPIO_Init+0x174>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <MX_GPIO_Init+0x174>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRFLED_Pin|STLED_Pin|ErrLED2_Pin|ErrLED1_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002014:	4833      	ldr	r0, [pc, #204]	; (80020e4 <MX_GPIO_Init+0x178>)
 8002016:	f002 f8ff 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CEpin_GPIO_Port, CEpin_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002020:	4831      	ldr	r0, [pc, #196]	; (80020e8 <MX_GPIO_Init+0x17c>)
 8002022:	f002 f8f9 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSNpin_GPIO_Port, CSNpin_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2104      	movs	r1, #4
 800202a:	4830      	ldr	r0, [pc, #192]	; (80020ec <MX_GPIO_Init+0x180>)
 800202c:	f002 f8f4 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	482a      	ldr	r0, [pc, #168]	; (80020f0 <MX_GPIO_Init+0x184>)
 8002048:	f001 ff62 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Vdetect_Pin INPUT1_Pin */
  GPIO_InitStruct.Pin = Vdetect_Pin|INPUT1_Pin;
 800204c:	f240 4304 	movw	r3, #1028	; 0x404
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4820      	ldr	r0, [pc, #128]	; (80020e4 <MX_GPIO_Init+0x178>)
 8002062:	f001 ff55 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRFLED_Pin STLED_Pin ErrLED2_Pin ErrLED1_Pin */
  GPIO_InitStruct.Pin = nRFLED_Pin|STLED_Pin|ErrLED2_Pin|ErrLED1_Pin;
 8002066:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4819      	ldr	r0, [pc, #100]	; (80020e4 <MX_GPIO_Init+0x178>)
 8002080:	f001 ff46 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT2_Pin */
  GPIO_InitStruct.Pin = INPUT2_Pin;
 8002084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT2_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_GPIO_Init+0x17c>)
 800209a:	f001 ff39 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEpin_Pin */
  GPIO_InitStruct.Pin = CEpin_Pin;
 800209e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CEpin_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_GPIO_Init+0x17c>)
 80020b8:	f001 ff2a 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSNpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin;
 80020bc:	2304      	movs	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSNpin_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <MX_GPIO_Init+0x180>)
 80020d4:	f001 ff1c 	bl	8003f10 <HAL_GPIO_Init>

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40020800 	.word	0x40020800

080020f4 <IIR_FILTER_CH4>:

/* USER CODE BEGIN 4 */
#define NCoef 3
float IIR_FILTER_CH4(float NewSample) {
 80020f4:	b490      	push	{r4, r7}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <IIR_FILTER_CH4+0xf0>)
 8002100:	f107 041c 	add.w	r4, r7, #28
 8002104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <IIR_FILTER_CH4+0xf4>)
 800210c:	f107 040c 	add.w	r4, r7, #12
 8002110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002116:	2303      	movs	r3, #3
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211a:	e018      	b.n	800214e <IIR_FILTER_CH4+0x5a>
       x[n] = x[n-1];
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	3b01      	subs	r3, #1
 8002120:	4a32      	ldr	r2, [pc, #200]	; (80021ec <IIR_FILTER_CH4+0xf8>)
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4930      	ldr	r1, [pc, #192]	; (80021ec <IIR_FILTER_CH4+0xf8>)
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	3b01      	subs	r3, #1
 8002136:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	492c      	ldr	r1, [pc, #176]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	3b01      	subs	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	dce3      	bgt.n	800211c <IIR_FILTER_CH4+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <IIR_FILTER_CH4+0xf8>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800215a:	ed97 7a07 	vldr	s14, [r7, #28]
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <IIR_FILTER_CH4+0xf8>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 800216a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800216e:	2301      	movs	r3, #1
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	e02a      	b.n	80021ca <IIR_FILTER_CH4+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3330      	adds	r3, #48	; 0x30
 8002180:	443b      	add	r3, r7
 8002182:	3b14      	subs	r3, #20
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <IIR_FILTER_CH4+0xf8>)
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3330      	adds	r3, #48	; 0x30
 800219e:	443b      	add	r3, r7
 80021a0:	3b24      	subs	r3, #36	; 0x24
 80021a2:	ed93 6a00 	vldr	s12, [r3]
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	3301      	adds	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	ddd1      	ble.n	8002174 <IIR_FILTER_CH4+0x80>

    return y[0];
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <IIR_FILTER_CH4+0xfc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	ee07 3a90 	vmov	s15, r3
}
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	3730      	adds	r7, #48	; 0x30
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc90      	pop	{r4, r7}
 80021e2:	4770      	bx	lr
 80021e4:	08006ee8 	.word	0x08006ee8
 80021e8:	08006ef8 	.word	0x08006ef8
 80021ec:	200002ec 	.word	0x200002ec
 80021f0:	200002fc 	.word	0x200002fc

080021f4 <IIR_FILTER_CH5>:
float IIR_FILTER_CH5(float NewSample) {
 80021f4:	b490      	push	{r4, r7}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <IIR_FILTER_CH5+0xf0>)
 8002200:	f107 041c 	add.w	r4, r7, #28
 8002204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <IIR_FILTER_CH5+0xf4>)
 800220c:	f107 040c 	add.w	r4, r7, #12
 8002210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002216:	2303      	movs	r3, #3
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221a:	e018      	b.n	800224e <IIR_FILTER_CH5+0x5a>
       x[n] = x[n-1];
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	3b01      	subs	r3, #1
 8002220:	4a32      	ldr	r2, [pc, #200]	; (80022ec <IIR_FILTER_CH5+0xf8>)
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4930      	ldr	r1, [pc, #192]	; (80022ec <IIR_FILTER_CH5+0xf8>)
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	3b01      	subs	r3, #1
 8002236:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	492c      	ldr	r1, [pc, #176]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	3b01      	subs	r3, #1
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	dce3      	bgt.n	800221c <IIR_FILTER_CH5+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <IIR_FILTER_CH5+0xf8>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800225a:	ed97 7a07 	vldr	s14, [r7, #28]
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <IIR_FILTER_CH5+0xf8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 800226a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800226e:	2301      	movs	r3, #1
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	e02a      	b.n	80022ca <IIR_FILTER_CH5+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	3330      	adds	r3, #48	; 0x30
 8002280:	443b      	add	r3, r7
 8002282:	3b14      	subs	r3, #20
 8002284:	edd3 6a00 	vldr	s13, [r3]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <IIR_FILTER_CH5+0xf8>)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	3330      	adds	r3, #48	; 0x30
 800229e:	443b      	add	r3, r7
 80022a0:	3b24      	subs	r3, #36	; 0x24
 80022a2:	ed93 6a00 	vldr	s12, [r3]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	3301      	adds	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	ddd1      	ble.n	8002274 <IIR_FILTER_CH5+0x80>

    return y[0];
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <IIR_FILTER_CH5+0xfc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	ee07 3a90 	vmov	s15, r3
}
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	3730      	adds	r7, #48	; 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc90      	pop	{r4, r7}
 80022e2:	4770      	bx	lr
 80022e4:	08006ee8 	.word	0x08006ee8
 80022e8:	08006ef8 	.word	0x08006ef8
 80022ec:	2000030c 	.word	0x2000030c
 80022f0:	2000031c 	.word	0x2000031c

080022f4 <IIR_FILTER_CH6>:
float IIR_FILTER_CH6(float NewSample) {
 80022f4:	b490      	push	{r4, r7}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <IIR_FILTER_CH6+0xf0>)
 8002300:	f107 041c 	add.w	r4, r7, #28
 8002304:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <IIR_FILTER_CH6+0xf4>)
 800230c:	f107 040c 	add.w	r4, r7, #12
 8002310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002316:	2303      	movs	r3, #3
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231a:	e018      	b.n	800234e <IIR_FILTER_CH6+0x5a>
       x[n] = x[n-1];
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	3b01      	subs	r3, #1
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <IIR_FILTER_CH6+0xf8>)
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4930      	ldr	r1, [pc, #192]	; (80023ec <IIR_FILTER_CH6+0xf8>)
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	3b01      	subs	r3, #1
 8002336:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	492c      	ldr	r1, [pc, #176]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	3b01      	subs	r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	2b00      	cmp	r3, #0
 8002352:	dce3      	bgt.n	800231c <IIR_FILTER_CH6+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <IIR_FILTER_CH6+0xf8>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800235a:	ed97 7a07 	vldr	s14, [r7, #28]
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <IIR_FILTER_CH6+0xf8>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 800236a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800236e:	2301      	movs	r3, #1
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	e02a      	b.n	80023ca <IIR_FILTER_CH6+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3330      	adds	r3, #48	; 0x30
 8002380:	443b      	add	r3, r7
 8002382:	3b14      	subs	r3, #20
 8002384:	edd3 6a00 	vldr	s13, [r3]
 8002388:	4a18      	ldr	r2, [pc, #96]	; (80023ec <IIR_FILTER_CH6+0xf8>)
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	3330      	adds	r3, #48	; 0x30
 800239e:	443b      	add	r3, r7
 80023a0:	3b24      	subs	r3, #36	; 0x24
 80023a2:	ed93 6a00 	vldr	s12, [r3]
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	3301      	adds	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	ddd1      	ble.n	8002374 <IIR_FILTER_CH6+0x80>

    return y[0];
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <IIR_FILTER_CH6+0xfc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	ee07 3a90 	vmov	s15, r3
}
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	3730      	adds	r7, #48	; 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc90      	pop	{r4, r7}
 80023e2:	4770      	bx	lr
 80023e4:	08006ee8 	.word	0x08006ee8
 80023e8:	08006ef8 	.word	0x08006ef8
 80023ec:	2000032c 	.word	0x2000032c
 80023f0:	2000033c 	.word	0x2000033c

080023f4 <IIR_FILTER_CH7>:
float IIR_FILTER_CH7(float NewSample) {
 80023f4:	b490      	push	{r4, r7}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <IIR_FILTER_CH7+0xf0>)
 8002400:	f107 041c 	add.w	r4, r7, #28
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <IIR_FILTER_CH7+0xf4>)
 800240c:	f107 040c 	add.w	r4, r7, #12
 8002410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002416:	2303      	movs	r3, #3
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	e018      	b.n	800244e <IIR_FILTER_CH7+0x5a>
       x[n] = x[n-1];
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	3b01      	subs	r3, #1
 8002420:	4a32      	ldr	r2, [pc, #200]	; (80024ec <IIR_FILTER_CH7+0xf8>)
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4930      	ldr	r1, [pc, #192]	; (80024ec <IIR_FILTER_CH7+0xf8>)
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	3b01      	subs	r3, #1
 8002436:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	492c      	ldr	r1, [pc, #176]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	3b01      	subs	r3, #1
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	dce3      	bgt.n	800241c <IIR_FILTER_CH7+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <IIR_FILTER_CH7+0xf8>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800245a:	ed97 7a07 	vldr	s14, [r7, #28]
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <IIR_FILTER_CH7+0xf8>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 800246a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800246e:	2301      	movs	r3, #1
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	e02a      	b.n	80024ca <IIR_FILTER_CH7+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	3330      	adds	r3, #48	; 0x30
 8002480:	443b      	add	r3, r7
 8002482:	3b14      	subs	r3, #20
 8002484:	edd3 6a00 	vldr	s13, [r3]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <IIR_FILTER_CH7+0xf8>)
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3330      	adds	r3, #48	; 0x30
 800249e:	443b      	add	r3, r7
 80024a0:	3b24      	subs	r3, #36	; 0x24
 80024a2:	ed93 6a00 	vldr	s12, [r3]
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 80024c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	3301      	adds	r3, #1
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	ddd1      	ble.n	8002474 <IIR_FILTER_CH7+0x80>

    return y[0];
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <IIR_FILTER_CH7+0xfc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	ee07 3a90 	vmov	s15, r3
}
 80024d8:	eeb0 0a67 	vmov.f32	s0, s15
 80024dc:	3730      	adds	r7, #48	; 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc90      	pop	{r4, r7}
 80024e2:	4770      	bx	lr
 80024e4:	08006ee8 	.word	0x08006ee8
 80024e8:	08006ef8 	.word	0x08006ef8
 80024ec:	2000034c 	.word	0x2000034c
 80024f0:	2000035c 	.word	0x2000035c

080024f4 <IIR_FILTER_CH8>:
float IIR_FILTER_CH8(float NewSample) {
 80024f4:	b490      	push	{r4, r7}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <IIR_FILTER_CH8+0xf0>)
 8002500:	f107 041c 	add.w	r4, r7, #28
 8002504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <IIR_FILTER_CH8+0xf4>)
 800250c:	f107 040c 	add.w	r4, r7, #12
 8002510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002516:	2303      	movs	r3, #3
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251a:	e018      	b.n	800254e <IIR_FILTER_CH8+0x5a>
       x[n] = x[n-1];
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	3b01      	subs	r3, #1
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <IIR_FILTER_CH8+0xf8>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4930      	ldr	r1, [pc, #192]	; (80025ec <IIR_FILTER_CH8+0xf8>)
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	3b01      	subs	r3, #1
 8002536:	4a2e      	ldr	r2, [pc, #184]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	492c      	ldr	r1, [pc, #176]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	3b01      	subs	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	dce3      	bgt.n	800251c <IIR_FILTER_CH8+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002554:	4a25      	ldr	r2, [pc, #148]	; (80025ec <IIR_FILTER_CH8+0xf8>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800255a:	ed97 7a07 	vldr	s14, [r7, #28]
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <IIR_FILTER_CH8+0xf8>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 800256a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800256e:	2301      	movs	r3, #1
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002572:	e02a      	b.n	80025ca <IIR_FILTER_CH8+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3330      	adds	r3, #48	; 0x30
 8002580:	443b      	add	r3, r7
 8002582:	3b14      	subs	r3, #20
 8002584:	edd3 6a00 	vldr	s13, [r3]
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <IIR_FILTER_CH8+0xf8>)
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	443b      	add	r3, r7
 80025a0:	3b24      	subs	r3, #36	; 0x24
 80025a2:	ed93 6a00 	vldr	s12, [r3]
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 80025c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	3301      	adds	r3, #1
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	ddd1      	ble.n	8002574 <IIR_FILTER_CH8+0x80>

    return y[0];
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <IIR_FILTER_CH8+0xfc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	ee07 3a90 	vmov	s15, r3
}
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	3730      	adds	r7, #48	; 0x30
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc90      	pop	{r4, r7}
 80025e2:	4770      	bx	lr
 80025e4:	08006ee8 	.word	0x08006ee8
 80025e8:	08006ef8 	.word	0x08006ef8
 80025ec:	2000036c 	.word	0x2000036c
 80025f0:	2000037c 	.word	0x2000037c

080025f4 <IIR_FILTER_CH9>:
float IIR_FILTER_CH9(float NewSample) {
 80025f4:	b490      	push	{r4, r7}
 80025f6:	b08c      	sub	sp, #48	; 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <IIR_FILTER_CH9+0xf0>)
 8002600:	f107 041c 	add.w	r4, r7, #28
 8002604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800260a:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <IIR_FILTER_CH9+0xf4>)
 800260c:	f107 040c 	add.w	r4, r7, #12
 8002610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002616:	2303      	movs	r3, #3
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	e018      	b.n	800264e <IIR_FILTER_CH9+0x5a>
       x[n] = x[n-1];
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	3b01      	subs	r3, #1
 8002620:	4a32      	ldr	r2, [pc, #200]	; (80026ec <IIR_FILTER_CH9+0xf8>)
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4930      	ldr	r1, [pc, #192]	; (80026ec <IIR_FILTER_CH9+0xf8>)
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	3b01      	subs	r3, #1
 8002636:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	492c      	ldr	r1, [pc, #176]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	3b01      	subs	r3, #1
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	dce3      	bgt.n	800261c <IIR_FILTER_CH9+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <IIR_FILTER_CH9+0xf8>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800265a:	ed97 7a07 	vldr	s14, [r7, #28]
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <IIR_FILTER_CH9+0xf8>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 800266a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800266e:	2301      	movs	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002672:	e02a      	b.n	80026ca <IIR_FILTER_CH9+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3330      	adds	r3, #48	; 0x30
 8002680:	443b      	add	r3, r7
 8002682:	3b14      	subs	r3, #20
 8002684:	edd3 6a00 	vldr	s13, [r3]
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <IIR_FILTER_CH9+0xf8>)
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3330      	adds	r3, #48	; 0x30
 800269e:	443b      	add	r3, r7
 80026a0:	3b24      	subs	r3, #36	; 0x24
 80026a2:	ed93 6a00 	vldr	s12, [r3]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3301      	adds	r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	ddd1      	ble.n	8002674 <IIR_FILTER_CH9+0x80>

    return y[0];
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <IIR_FILTER_CH9+0xfc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	ee07 3a90 	vmov	s15, r3
}
 80026d8:	eeb0 0a67 	vmov.f32	s0, s15
 80026dc:	3730      	adds	r7, #48	; 0x30
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc90      	pop	{r4, r7}
 80026e2:	4770      	bx	lr
 80026e4:	08006ee8 	.word	0x08006ee8
 80026e8:	08006ef8 	.word	0x08006ef8
 80026ec:	2000038c 	.word	0x2000038c
 80026f0:	2000039c 	.word	0x2000039c

080026f4 <IIR_FILTER_CH10>:
float IIR_FILTER_CH10(float NewSample) {
 80026f4:	b490      	push	{r4, r7}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <IIR_FILTER_CH10+0xf0>)
 8002700:	f107 041c 	add.w	r4, r7, #28
 8002704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <IIR_FILTER_CH10+0xf4>)
 800270c:	f107 040c 	add.w	r4, r7, #12
 8002710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002716:	2303      	movs	r3, #3
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800271a:	e018      	b.n	800274e <IIR_FILTER_CH10+0x5a>
       x[n] = x[n-1];
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	3b01      	subs	r3, #1
 8002720:	4a32      	ldr	r2, [pc, #200]	; (80027ec <IIR_FILTER_CH10+0xf8>)
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4930      	ldr	r1, [pc, #192]	; (80027ec <IIR_FILTER_CH10+0xf8>)
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	3b01      	subs	r3, #1
 8002736:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	492c      	ldr	r1, [pc, #176]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	3b01      	subs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	dce3      	bgt.n	800271c <IIR_FILTER_CH10+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <IIR_FILTER_CH10+0xf8>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800275a:	ed97 7a07 	vldr	s14, [r7, #28]
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <IIR_FILTER_CH10+0xf8>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 800276a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800276e:	2301      	movs	r3, #1
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002772:	e02a      	b.n	80027ca <IIR_FILTER_CH10+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3330      	adds	r3, #48	; 0x30
 8002780:	443b      	add	r3, r7
 8002782:	3b14      	subs	r3, #20
 8002784:	edd3 6a00 	vldr	s13, [r3]
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <IIR_FILTER_CH10+0xf8>)
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3330      	adds	r3, #48	; 0x30
 800279e:	443b      	add	r3, r7
 80027a0:	3b24      	subs	r3, #36	; 0x24
 80027a2:	ed93 6a00 	vldr	s12, [r3]
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 80027c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	3301      	adds	r3, #1
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	ddd1      	ble.n	8002774 <IIR_FILTER_CH10+0x80>

    return y[0];
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <IIR_FILTER_CH10+0xfc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	ee07 3a90 	vmov	s15, r3
}
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	3730      	adds	r7, #48	; 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc90      	pop	{r4, r7}
 80027e2:	4770      	bx	lr
 80027e4:	08006ee8 	.word	0x08006ee8
 80027e8:	08006ef8 	.word	0x08006ef8
 80027ec:	200003ac 	.word	0x200003ac
 80027f0:	200003bc 	.word	0x200003bc

080027f4 <IIR_FILTER_CH11>:
float IIR_FILTER_CH11(float NewSample) {
 80027f4:	b490      	push	{r4, r7}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <IIR_FILTER_CH11+0xf0>)
 8002800:	f107 041c 	add.w	r4, r7, #28
 8002804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <IIR_FILTER_CH11+0xf4>)
 800280c:	f107 040c 	add.w	r4, r7, #12
 8002810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002816:	2303      	movs	r3, #3
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281a:	e018      	b.n	800284e <IIR_FILTER_CH11+0x5a>
       x[n] = x[n-1];
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3b01      	subs	r3, #1
 8002820:	4a32      	ldr	r2, [pc, #200]	; (80028ec <IIR_FILTER_CH11+0xf8>)
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4930      	ldr	r1, [pc, #192]	; (80028ec <IIR_FILTER_CH11+0xf8>)
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	3b01      	subs	r3, #1
 8002836:	4a2e      	ldr	r2, [pc, #184]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	492c      	ldr	r1, [pc, #176]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	3b01      	subs	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	dce3      	bgt.n	800281c <IIR_FILTER_CH11+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <IIR_FILTER_CH11+0xf8>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800285a:	ed97 7a07 	vldr	s14, [r7, #28]
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <IIR_FILTER_CH11+0xf8>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 800286a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800286e:	2301      	movs	r3, #1
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	e02a      	b.n	80028ca <IIR_FILTER_CH11+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 8002876:	ed93 7a00 	vldr	s14, [r3]
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3330      	adds	r3, #48	; 0x30
 8002880:	443b      	add	r3, r7
 8002882:	3b14      	subs	r3, #20
 8002884:	edd3 6a00 	vldr	s13, [r3]
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <IIR_FILTER_CH11+0xf8>)
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	3330      	adds	r3, #48	; 0x30
 800289e:	443b      	add	r3, r7
 80028a0:	3b24      	subs	r3, #36	; 0x24
 80028a2:	ed93 6a00 	vldr	s12, [r3]
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	3301      	adds	r3, #1
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	ddd1      	ble.n	8002874 <IIR_FILTER_CH11+0x80>

    return y[0];
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <IIR_FILTER_CH11+0xfc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	ee07 3a90 	vmov	s15, r3
}
 80028d8:	eeb0 0a67 	vmov.f32	s0, s15
 80028dc:	3730      	adds	r7, #48	; 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc90      	pop	{r4, r7}
 80028e2:	4770      	bx	lr
 80028e4:	08006ee8 	.word	0x08006ee8
 80028e8:	08006ef8 	.word	0x08006ef8
 80028ec:	200003cc 	.word	0x200003cc
 80028f0:	200003dc 	.word	0x200003dc

080028f4 <IIR_FILTER_CH12>:
float IIR_FILTER_CH12(float NewSample) {
 80028f4:	b490      	push	{r4, r7}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <IIR_FILTER_CH12+0xf0>)
 8002900:	f107 041c 	add.w	r4, r7, #28
 8002904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <IIR_FILTER_CH12+0xf4>)
 800290c:	f107 040c 	add.w	r4, r7, #12
 8002910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002916:	2303      	movs	r3, #3
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291a:	e018      	b.n	800294e <IIR_FILTER_CH12+0x5a>
       x[n] = x[n-1];
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	3b01      	subs	r3, #1
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <IIR_FILTER_CH12+0xf8>)
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4930      	ldr	r1, [pc, #192]	; (80029ec <IIR_FILTER_CH12+0xf8>)
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	3b01      	subs	r3, #1
 8002936:	4a2e      	ldr	r2, [pc, #184]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	492c      	ldr	r1, [pc, #176]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	3b01      	subs	r3, #1
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	dce3      	bgt.n	800291c <IIR_FILTER_CH12+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <IIR_FILTER_CH12+0xf8>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800295a:	ed97 7a07 	vldr	s14, [r7, #28]
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <IIR_FILTER_CH12+0xf8>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 800296a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	e02a      	b.n	80029ca <IIR_FILTER_CH12+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 8002976:	ed93 7a00 	vldr	s14, [r3]
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	3330      	adds	r3, #48	; 0x30
 8002980:	443b      	add	r3, r7
 8002982:	3b14      	subs	r3, #20
 8002984:	edd3 6a00 	vldr	s13, [r3]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <IIR_FILTER_CH12+0xf8>)
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3330      	adds	r3, #48	; 0x30
 800299e:	443b      	add	r3, r7
 80029a0:	3b24      	subs	r3, #36	; 0x24
 80029a2:	ed93 6a00 	vldr	s12, [r3]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 80029c0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	3301      	adds	r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	ddd1      	ble.n	8002974 <IIR_FILTER_CH12+0x80>

    return y[0];
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <IIR_FILTER_CH12+0xfc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	ee07 3a90 	vmov	s15, r3
}
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	3730      	adds	r7, #48	; 0x30
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc90      	pop	{r4, r7}
 80029e2:	4770      	bx	lr
 80029e4:	08006ee8 	.word	0x08006ee8
 80029e8:	08006ef8 	.word	0x08006ef8
 80029ec:	200003ec 	.word	0x200003ec
 80029f0:	200003fc 	.word	0x200003fc

080029f4 <IIR_FILTER_CH13>:
float IIR_FILTER_CH13(float NewSample) {
 80029f4:	b490      	push	{r4, r7}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <IIR_FILTER_CH13+0xf0>)
 8002a00:	f107 041c 	add.w	r4, r7, #28
 8002a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <IIR_FILTER_CH13+0xf4>)
 8002a0c:	f107 040c 	add.w	r4, r7, #12
 8002a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002a16:	2303      	movs	r3, #3
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	e018      	b.n	8002a4e <IIR_FILTER_CH13+0x5a>
       x[n] = x[n-1];
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a32      	ldr	r2, [pc, #200]	; (8002aec <IIR_FILTER_CH13+0xf8>)
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4930      	ldr	r1, [pc, #192]	; (8002aec <IIR_FILTER_CH13+0xf8>)
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	3b01      	subs	r3, #1
 8002a36:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	492c      	ldr	r1, [pc, #176]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	dce3      	bgt.n	8002a1c <IIR_FILTER_CH13+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <IIR_FILTER_CH13+0xf8>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 8002a5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <IIR_FILTER_CH13+0xf8>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	e02a      	b.n	8002aca <IIR_FILTER_CH13+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3330      	adds	r3, #48	; 0x30
 8002a80:	443b      	add	r3, r7
 8002a82:	3b14      	subs	r3, #20
 8002a84:	edd3 6a00 	vldr	s13, [r3]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <IIR_FILTER_CH13+0xf8>)
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3330      	adds	r3, #48	; 0x30
 8002a9e:	443b      	add	r3, r7
 8002aa0:	3b24      	subs	r3, #36	; 0x24
 8002aa2:	ed93 6a00 	vldr	s12, [r3]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ab6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	ddd1      	ble.n	8002a74 <IIR_FILTER_CH13+0x80>

    return y[0];
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <IIR_FILTER_CH13+0xfc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	ee07 3a90 	vmov	s15, r3
}
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	3730      	adds	r7, #48	; 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc90      	pop	{r4, r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	08006ee8 	.word	0x08006ee8
 8002ae8:	08006ef8 	.word	0x08006ef8
 8002aec:	2000040c 	.word	0x2000040c
 8002af0:	2000041c 	.word	0x2000041c

08002af4 <IIR_FILTER_CH14>:
float IIR_FILTER_CH14(float NewSample) {
 8002af4:	b490      	push	{r4, r7}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <IIR_FILTER_CH14+0xf0>)
 8002b00:	f107 041c 	add.w	r4, r7, #28
 8002b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <IIR_FILTER_CH14+0xf4>)
 8002b0c:	f107 040c 	add.w	r4, r7, #12
 8002b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002b16:	2303      	movs	r3, #3
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	e018      	b.n	8002b4e <IIR_FILTER_CH14+0x5a>
       x[n] = x[n-1];
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	4a32      	ldr	r2, [pc, #200]	; (8002bec <IIR_FILTER_CH14+0xf8>)
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4930      	ldr	r1, [pc, #192]	; (8002bec <IIR_FILTER_CH14+0xf8>)
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3b01      	subs	r3, #1
 8002b36:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	492c      	ldr	r1, [pc, #176]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	dce3      	bgt.n	8002b1c <IIR_FILTER_CH14+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002b54:	4a25      	ldr	r2, [pc, #148]	; (8002bec <IIR_FILTER_CH14+0xf8>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 8002b5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <IIR_FILTER_CH14+0xf8>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	e02a      	b.n	8002bca <IIR_FILTER_CH14+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3330      	adds	r3, #48	; 0x30
 8002b80:	443b      	add	r3, r7
 8002b82:	3b14      	subs	r3, #20
 8002b84:	edd3 6a00 	vldr	s13, [r3]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <IIR_FILTER_CH14+0xf8>)
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3330      	adds	r3, #48	; 0x30
 8002b9e:	443b      	add	r3, r7
 8002ba0:	3b24      	subs	r3, #36	; 0x24
 8002ba2:	ed93 6a00 	vldr	s12, [r3]
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	ddd1      	ble.n	8002b74 <IIR_FILTER_CH14+0x80>

    return y[0];
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <IIR_FILTER_CH14+0xfc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	ee07 3a90 	vmov	s15, r3
}
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	3730      	adds	r7, #48	; 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc90      	pop	{r4, r7}
 8002be2:	4770      	bx	lr
 8002be4:	08006ee8 	.word	0x08006ee8
 8002be8:	08006ef8 	.word	0x08006ef8
 8002bec:	2000042c 	.word	0x2000042c
 8002bf0:	2000043c 	.word	0x2000043c

08002bf4 <IIR_FILTER_CH15>:
float IIR_FILTER_CH15(float NewSample) {
 8002bf4:	b490      	push	{r4, r7}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	ed87 0a01 	vstr	s0, [r7, #4]
    float ACoef[NCoef+1] = {
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <IIR_FILTER_CH15+0xf0>)
 8002c00:	f107 041c 	add.w	r4, r7, #28
 8002c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.01347853594072722700,
        0.01347853594072722700,
        0.00449284531357574230
    };

    float BCoef[NCoef+1] = {
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <IIR_FILTER_CH15+0xf4>)
 8002c0c:	f107 040c 	add.w	r4, r7, #12
 8002c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8002c16:	2303      	movs	r3, #3
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	e018      	b.n	8002c4e <IIR_FILTER_CH15+0x5a>
       x[n] = x[n-1];
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	4a32      	ldr	r2, [pc, #200]	; (8002cec <IIR_FILTER_CH15+0xf8>)
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4930      	ldr	r1, [pc, #192]	; (8002cec <IIR_FILTER_CH15+0xf8>)
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	601a      	str	r2, [r3, #0]
       y[n] = y[n-1];
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	3b01      	subs	r3, #1
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	492c      	ldr	r1, [pc, #176]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	601a      	str	r2, [r3, #0]
    for(n=NCoef; n>0; n--) {
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	dce3      	bgt.n	8002c1c <IIR_FILTER_CH15+0x28>
    }

    //Calculate the new output
    x[0] = NewSample;
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <IIR_FILTER_CH15+0xf8>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 8002c5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <IIR_FILTER_CH15+0xf8>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002c6e:	2301      	movs	r3, #1
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	e02a      	b.n	8002cca <IIR_FILTER_CH15+0xd6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002c76:	ed93 7a00 	vldr	s14, [r3]
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3330      	adds	r3, #48	; 0x30
 8002c80:	443b      	add	r3, r7
 8002c82:	3b14      	subs	r3, #20
 8002c84:	edd3 6a00 	vldr	s13, [r3]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <IIR_FILTER_CH15+0xf8>)
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	443b      	add	r3, r7
 8002ca0:	3b24      	subs	r3, #36	; 0x24
 8002ca2:	ed93 6a00 	vldr	s12, [r3]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
    for(n=1; n<=NCoef; n++)
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	ddd1      	ble.n	8002c74 <IIR_FILTER_CH15+0x80>

    return y[0];
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <IIR_FILTER_CH15+0xfc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	ee07 3a90 	vmov	s15, r3
}
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc90      	pop	{r4, r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	08006ee8 	.word	0x08006ee8
 8002ce8:	08006ef8 	.word	0x08006ef8
 8002cec:	2000044c 	.word	0x2000044c
 8002cf0:	2000045c 	.word	0x2000045c

08002cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf8:	b672      	cpsid	i
}
 8002cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <Error_Handler+0x8>
	...

08002d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d3e:	2007      	movs	r0, #7
 8002d40:	f001 f812 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800

08002d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_ADC_MspInit+0xe4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d15b      	bne.n	8002e2a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_ADC_MspInit+0xe8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002de2:	233f      	movs	r3, #63	; 0x3f
 8002de4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de6:	2303      	movs	r3, #3
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	4811      	ldr	r0, [pc, #68]	; (8002e3c <HAL_ADC_MspInit+0xec>)
 8002df6:	f001 f88b 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dfa:	23f0      	movs	r3, #240	; 0xf0
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <HAL_ADC_MspInit+0xf0>)
 8002e0e:	f001 f87f 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e12:	2303      	movs	r3, #3
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 031c 	add.w	r3, r7, #28
 8002e22:	4619      	mov	r1, r3
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <HAL_ADC_MspInit+0xf4>)
 8002e26:	f001 f873 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3730      	adds	r7, #48	; 0x30
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40012000 	.word	0x40012000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <HAL_SPI_MspInit+0x84>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12c      	bne.n	8002ec4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ea2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <HAL_SPI_MspInit+0x8c>)
 8002ec0:	f001 f826 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec4:	bf00      	nop
 8002ec6:	3728      	adds	r7, #40	; 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40003c00 	.word	0x40003c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020800 	.word	0x40020800

08002ed8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_TIM_PWM_MspInit+0xb4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f06:	e03a      	b.n	8002f7e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
}
 8002f2e:	e026      	b.n	8002f7e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_TIM_PWM_MspInit+0xbc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	e012      	b.n	8002f7e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_TIM_PWM_MspInit+0xc0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10d      	bne.n	8002f7e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_TIM_PWM_MspInit+0xb8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	; 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_TIM_MspPostInit+0x180>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d11f      	bne.n	8002ffe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a56      	ldr	r2, [pc, #344]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002fda:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fec:	2301      	movs	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	484b      	ldr	r0, [pc, #300]	; (8003124 <HAL_TIM_MspPostInit+0x188>)
 8002ff8:	f000 ff8a 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ffc:	e08a      	b.n	8003114 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003006:	d11e      	bne.n	8003046 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6313      	str	r3, [r2, #48]	; 0x30
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003024:	230f      	movs	r3, #15
 8003026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003034:	2301      	movs	r3, #1
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	4839      	ldr	r0, [pc, #228]	; (8003124 <HAL_TIM_MspPostInit+0x188>)
 8003040:	f000 ff66 	bl	8003f10 <HAL_GPIO_Init>
}
 8003044:	e066      	b.n	8003114 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM3)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a37      	ldr	r2, [pc, #220]	; (8003128 <HAL_TIM_MspPostInit+0x18c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d13d      	bne.n	80030cc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6313      	str	r3, [r2, #48]	; 0x30
 8003060:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800309a:	2302      	movs	r3, #2
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	4821      	ldr	r0, [pc, #132]	; (800312c <HAL_TIM_MspPostInit+0x190>)
 80030a6:	f000 ff33 	bl	8003f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030aa:	2330      	movs	r3, #48	; 0x30
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ba:	2302      	movs	r3, #2
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	481a      	ldr	r0, [pc, #104]	; (8003130 <HAL_TIM_MspPostInit+0x194>)
 80030c6:	f000 ff23 	bl	8003f10 <HAL_GPIO_Init>
}
 80030ca:	e023      	b.n	8003114 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM4)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_TIM_MspPostInit+0x198>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11e      	bne.n	8003114 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_TIM_MspPostInit+0x184>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80030f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80030f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003104:	2302      	movs	r3, #2
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	4619      	mov	r1, r3
 800310e:	4808      	ldr	r0, [pc, #32]	; (8003130 <HAL_TIM_MspPostInit+0x194>)
 8003110:	f000 fefe 	bl	8003f10 <HAL_GPIO_Init>
}
 8003114:	bf00      	nop
 8003116:	3730      	adds	r7, #48	; 0x30
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40010000 	.word	0x40010000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000
 8003128:	40000400 	.word	0x40000400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020400 	.word	0x40020400
 8003134:	40000800 	.word	0x40000800

08003138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_UART_MspInit+0x94>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d133      	bne.n	80031c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_UART_MspInit+0x98>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_UART_MspInit+0x98>)
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	6453      	str	r3, [r2, #68]	; 0x44
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_UART_MspInit+0x98>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_UART_MspInit+0x98>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_UART_MspInit+0x98>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_UART_MspInit+0x98>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003192:	23c0      	movs	r3, #192	; 0xc0
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031a2:	2308      	movs	r3, #8
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	4809      	ldr	r0, [pc, #36]	; (80031d4 <HAL_UART_MspInit+0x9c>)
 80031ae:	f000 feaf 	bl	8003f10 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2047      	movs	r0, #71	; 0x47
 80031b8:	f000 fde1 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031bc:	2047      	movs	r0, #71	; 0x47
 80031be:	f000 fdfa 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031c2:	bf00      	nop
 80031c4:	3728      	adds	r7, #40	; 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40011400 	.word	0x40011400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020800 	.word	0x40020800

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <NMI_Handler+0x4>

080031de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <MemManage_Handler+0x4>

080031ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <BusFault_Handler+0x4>

080031f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <UsageFault_Handler+0x4>

080031f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003224:	f000 f89a 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <USART6_IRQHandler+0x10>)
 8003232:	f002 ff4d 	bl	80060d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200002a8 	.word	0x200002a8

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326a:	490e      	ldr	r1, [pc, #56]	; (80032a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800328e:	f7ff ffd7 	bl	8003240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f003 fde3 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7fe fa37 	bl	8001708 <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800329c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80032a8:	08006f30 	.word	0x08006f30
  ldr r2, =_sbss
 80032ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80032b0:	20000470 	.word	0x20000470

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_Init+0x40>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_Init+0x40>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_Init+0x40>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 fd41 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f000 f808 	bl	80032fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ec:	f7ff fd08 	bl	8002d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x54>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003312:	fbb3 f3f1 	udiv	r3, r3, r1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd59 	bl	8003dd2 <HAL_SYSTICK_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00e      	b.n	8003348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d80a      	bhi.n	8003346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f000 fd21 	bl	8003d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <HAL_InitTick+0x5c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000008 	.word	0x20000008
 8003354:	20000010 	.word	0x20000010
 8003358:	2000000c 	.word	0x2000000c

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000010 	.word	0x20000010
 8003380:	2000046c 	.word	0x2000046c

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000046c 	.word	0x2000046c

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d005      	beq.n	80033c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_Delay+0x44>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c2:	bf00      	nop
 80033c4:	f7ff ffde 	bl	8003384 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d8f7      	bhi.n	80033c4 <HAL_Delay+0x28>
  {
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000010 	.word	0x20000010

080033e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e033      	b.n	8003462 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fca4 	bl	8002d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800342a:	f023 0302 	bic.w	r3, r3, #2
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 faca 	bl	80039d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
 8003452:	e001      	b.n	8003458 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Start+0x1a>
 8003482:	2302      	movs	r3, #2
 8003484:	e097      	b.n	80035b6 <HAL_ADC_Start+0x14a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d018      	beq.n	80034ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <HAL_ADC_Start+0x158>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a45      	ldr	r2, [pc, #276]	; (80035c8 <HAL_ADC_Start+0x15c>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9a      	lsrs	r2, r3, #18
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034c0:	e002      	b.n	80034c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f9      	bne.n	80034c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d15f      	bne.n	800359c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003506:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	d106      	bne.n	800352a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f023 0206 	bic.w	r2, r3, #6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
 8003528:	e002      	b.n	8003530 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_ADC_Start+0x160>)
 800353a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003544:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d129      	bne.n	80035b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e020      	b.n	80035b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_ADC_Start+0x164>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d11b      	bne.n	80035b4 <HAL_ADC_Start+0x148>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d114      	bne.n	80035b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	e00b      	b.n	80035b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0210 	orr.w	r2, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000008 	.word	0x20000008
 80035c8:	431bde83 	.word	0x431bde83
 80035cc:	40012300 	.word	0x40012300
 80035d0:	40012000 	.word	0x40012000

080035d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_Stop+0x16>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e021      	b.n	800362e <HAL_ADC_Stop+0x5a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d113      	bne.n	8003680 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d10b      	bne.n	8003680 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e063      	b.n	8003748 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003680:	f7ff fe80 	bl	8003384 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003686:	e021      	b.n	80036cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d01d      	beq.n	80036cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_ADC_PollForConversion+0x6c>
 8003696:	f7ff fe75 	bl	8003384 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d212      	bcs.n	80036cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d00b      	beq.n	80036cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e03d      	b.n	8003748 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d1d6      	bne.n	8003688 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0212 	mvn.w	r2, #18
 80036e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d123      	bne.n	8003746 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11f      	bne.n	8003746 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800371e:	2b00      	cmp	r3, #0
 8003720:	d111      	bne.n	8003746 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1c>
 8003784:	2302      	movs	r3, #2
 8003786:	e113      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x244>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b09      	cmp	r3, #9
 8003796:	d925      	bls.n	80037e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	3b1e      	subs	r3, #30
 80037ae:	2207      	movs	r2, #7
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43da      	mvns	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	400a      	ands	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	4618      	mov	r0, r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4403      	add	r3, r0
 80037d6:	3b1e      	subs	r3, #30
 80037d8:	409a      	lsls	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e022      	b.n	800382a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	2207      	movs	r2, #7
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	400a      	ands	r2, r1
 8003806:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	4618      	mov	r0, r3
 800381a:	4603      	mov	r3, r0
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4403      	add	r3, r0
 8003820:	409a      	lsls	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d824      	bhi.n	800387c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3b05      	subs	r3, #5
 8003844:	221f      	movs	r2, #31
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b05      	subs	r3, #5
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
 800387a:	e04c      	b.n	8003916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d824      	bhi.n	80038ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b23      	subs	r3, #35	; 0x23
 8003896:	221f      	movs	r2, #31
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43da      	mvns	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	400a      	ands	r2, r1
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	3b23      	subs	r3, #35	; 0x23
 80038c0:	fa00 f203 	lsl.w	r2, r0, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
 80038cc:	e023      	b.n	8003916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	3b41      	subs	r3, #65	; 0x41
 80038e0:	221f      	movs	r2, #31
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	400a      	ands	r2, r1
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3b41      	subs	r3, #65	; 0x41
 800390a:	fa00 f203 	lsl.w	r2, r0, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_ADC_ConfigChannel+0x250>)
 8003918:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <HAL_ADC_ConfigChannel+0x254>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10f      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x1d8>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b12      	cmp	r3, #18
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_ADC_ConfigChannel+0x254>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d12b      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x23a>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_ADC_ConfigChannel+0x258>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <HAL_ADC_ConfigChannel+0x1f4>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b11      	cmp	r3, #17
 800395e:	d122      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <HAL_ADC_ConfigChannel+0x258>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_ADC_ConfigChannel+0x260>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	0c9a      	lsrs	r2, r3, #18
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003998:	e002      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3b01      	subs	r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	40012000 	.word	0x40012000
 80039c4:	10000012 	.word	0x10000012
 80039c8:	20000008 	.word	0x20000008
 80039cc:	431bde83 	.word	0x431bde83

080039d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d8:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <ADC_Init+0x1f0>)
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <ADC_Init+0x1f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	e00f      	b.n	8003ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0202 	bic.w	r2, r2, #2
 8003adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7e1b      	ldrb	r3, [r3, #24]
 8003ae8:	005a      	lsls	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01b      	beq.n	8003b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	3b01      	subs	r3, #1
 8003b28:	035a      	lsls	r2, r3, #13
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	e007      	b.n	8003b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	051a      	lsls	r2, r3, #20
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b86:	025a      	lsls	r2, r3, #9
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	029a      	lsls	r2, r3, #10
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012300 	.word	0x40012300
 8003bc4:	0f000001 	.word	0x0f000001

08003bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be4:	4013      	ands	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfa:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	60d3      	str	r3, [r2, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <__NVIC_GetPriorityGrouping+0x18>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 0307 	and.w	r3, r3, #7
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db0b      	blt.n	8003c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <__NVIC_EnableIRQ+0x38>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	; (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
         );
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff8e 	bl	8003c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff29 	bl	8003bc8 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff3e 	bl	8003c10 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff8e 	bl	8003cbc <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff5d 	bl	8003c68 <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff31 	bl	8003c2c <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffa2 	bl	8003d24 <SysTick_Config>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff fac4 	bl	8003384 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d008      	beq.n	8003e1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e052      	b.n	8003ec2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0216 	bic.w	r2, r2, #22
 8003e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_DMA_Abort+0x62>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0208 	bic.w	r2, r2, #8
 8003e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6c:	e013      	b.n	8003e96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e6e:	f7ff fa89 	bl	8003384 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d90c      	bls.n	8003e96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e015      	b.n	8003ec2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e4      	bne.n	8003e6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	223f      	movs	r2, #63	; 0x3f
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e00c      	b.n	8003f02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2205      	movs	r2, #5
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e159      	b.n	80041e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f040 8148 	bne.w	80041da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d005      	beq.n	8003f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d130      	bne.n	8003fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 0201 	and.w	r2, r3, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d017      	beq.n	8004000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d123      	bne.n	8004054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	08da      	lsrs	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3208      	adds	r2, #8
 8004014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	220f      	movs	r2, #15
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a2 	beq.w	80041da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <HAL_GPIO_Init+0x2e8>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a56      	ldr	r2, [pc, #344]	; (80041f8 <HAL_GPIO_Init+0x2e8>)
 80040a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b54      	ldr	r3, [pc, #336]	; (80041f8 <HAL_GPIO_Init+0x2e8>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b2:	4a52      	ldr	r2, [pc, #328]	; (80041fc <HAL_GPIO_Init+0x2ec>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a49      	ldr	r2, [pc, #292]	; (8004200 <HAL_GPIO_Init+0x2f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_Init+0x202>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a48      	ldr	r2, [pc, #288]	; (8004204 <HAL_GPIO_Init+0x2f4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_Init+0x1fe>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <HAL_GPIO_Init+0x2f8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_Init+0x1fa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a46      	ldr	r2, [pc, #280]	; (800420c <HAL_GPIO_Init+0x2fc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_Init+0x1f6>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a45      	ldr	r2, [pc, #276]	; (8004210 <HAL_GPIO_Init+0x300>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_Init+0x1f2>
 80040fe:	2304      	movs	r3, #4
 8004100:	e008      	b.n	8004114 <HAL_GPIO_Init+0x204>
 8004102:	2307      	movs	r3, #7
 8004104:	e006      	b.n	8004114 <HAL_GPIO_Init+0x204>
 8004106:	2303      	movs	r3, #3
 8004108:	e004      	b.n	8004114 <HAL_GPIO_Init+0x204>
 800410a:	2302      	movs	r3, #2
 800410c:	e002      	b.n	8004114 <HAL_GPIO_Init+0x204>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_GPIO_Init+0x204>
 8004112:	2300      	movs	r3, #0
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f002 0203 	and.w	r2, r2, #3
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	4093      	lsls	r3, r2
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004124:	4935      	ldr	r1, [pc, #212]	; (80041fc <HAL_GPIO_Init+0x2ec>)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	3302      	adds	r3, #2
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_GPIO_Init+0x304>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004156:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <HAL_GPIO_Init+0x304>)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_GPIO_Init+0x304>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <HAL_GPIO_Init+0x304>)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <HAL_GPIO_Init+0x304>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <HAL_GPIO_Init+0x304>)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_GPIO_Init+0x304>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <HAL_GPIO_Init+0x304>)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3301      	adds	r3, #1
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b0f      	cmp	r3, #15
 80041e4:	f67f aea2 	bls.w	8003f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40013800 	.word	0x40013800
 8004200:	40020000 	.word	0x40020000
 8004204:	40020400 	.word	0x40020400
 8004208:	40020800 	.word	0x40020800
 800420c:	40020c00 	.word	0x40020c00
 8004210:	40021000 	.word	0x40021000
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004234:	e003      	b.n	800423e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e267      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d075      	beq.n	8004356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426a:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCC_OscConfig+0x240>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00c      	beq.n	8004290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004276:	4b85      	ldr	r3, [pc, #532]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800427e:	2b08      	cmp	r3, #8
 8004280:	d112      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004282:	4b82      	ldr	r3, [pc, #520]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428e:	d10b      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	4b7e      	ldr	r3, [pc, #504]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d05b      	beq.n	8004354 <HAL_RCC_OscConfig+0x108>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d157      	bne.n	8004354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e242      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCC_OscConfig+0x74>
 80042b2:	4b76      	ldr	r3, [pc, #472]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e01d      	b.n	80042fc <HAL_RCC_OscConfig+0xb0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x98>
 80042ca:	4b70      	ldr	r3, [pc, #448]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6f      	ldr	r2, [pc, #444]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6c      	ldr	r2, [pc, #432]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e00b      	b.n	80042fc <HAL_RCC_OscConfig+0xb0>
 80042e4:	4b69      	ldr	r3, [pc, #420]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a68      	ldr	r2, [pc, #416]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a65      	ldr	r2, [pc, #404]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7ff f83e 	bl	8003384 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7ff f83a 	bl	8003384 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e207      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	4b5b      	ldr	r3, [pc, #364]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0xc0>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7ff f82a 	bl	8003384 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004334:	f7ff f826 	bl	8003384 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e1f3      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	4b51      	ldr	r3, [pc, #324]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0xe8>
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d063      	beq.n	800442a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004376:	2b08      	cmp	r3, #8
 8004378:	d11c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b44      	ldr	r3, [pc, #272]	; (800448c <HAL_RCC_OscConfig+0x240>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	4b41      	ldr	r3, [pc, #260]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_RCC_OscConfig+0x152>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e1c7      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4937      	ldr	r1, [pc, #220]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b2:	e03a      	b.n	800442a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043bc:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x244>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe ffdf 	bl	8003384 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe ffdb 	bl	8003384 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e1a8      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4925      	ldr	r1, [pc, #148]	; (800448c <HAL_RCC_OscConfig+0x240>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	e015      	b.n	800442a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCC_OscConfig+0x244>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe ffbe 	bl	8003384 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440c:	f7fe ffba 	bl	8003384 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e187      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d036      	beq.n	80044a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_RCC_OscConfig+0x248>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe ff9e 	bl	8003384 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444c:	f7fe ff9a 	bl	8003384 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e167      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_OscConfig+0x240>)
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x200>
 800446a:	e01b      	b.n	80044a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_OscConfig+0x248>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004472:	f7fe ff87 	bl	8003384 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	e00e      	b.n	8004498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447a:	f7fe ff83 	bl	8003384 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d907      	bls.n	8004498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e150      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
 800448c:	40023800 	.word	0x40023800
 8004490:	42470000 	.word	0x42470000
 8004494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b88      	ldr	r3, [pc, #544]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ea      	bne.n	800447a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8097 	beq.w	80045e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b81      	ldr	r3, [pc, #516]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	4b7d      	ldr	r3, [pc, #500]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a7c      	ldr	r2, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b7a      	ldr	r3, [pc, #488]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b77      	ldr	r3, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x474>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b74      	ldr	r3, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x474>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a73      	ldr	r2, [pc, #460]	; (80046c0 <HAL_RCC_OscConfig+0x474>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fe ff43 	bl	8003384 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fe ff3f 	bl	8003384 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e10c      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <HAL_RCC_OscConfig+0x474>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x2ea>
 8004528:	4b64      	ldr	r3, [pc, #400]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a63      	ldr	r2, [pc, #396]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	e01c      	b.n	8004570 <HAL_RCC_OscConfig+0x324>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b05      	cmp	r3, #5
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x30c>
 800453e:	4b5f      	ldr	r3, [pc, #380]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a5e      	ldr	r2, [pc, #376]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
 800454a:	4b5c      	ldr	r3, [pc, #368]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a5b      	ldr	r2, [pc, #364]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0x324>
 8004558:	4b58      	ldr	r3, [pc, #352]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a57      	ldr	r2, [pc, #348]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4a54      	ldr	r2, [pc, #336]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 800456a:	f023 0304 	bic.w	r3, r3, #4
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fe ff04 	bl	8003384 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e00a      	b.n	8004596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fe ff00 	bl	8003384 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e0cb      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	4b49      	ldr	r3, [pc, #292]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ee      	beq.n	8004580 <HAL_RCC_OscConfig+0x334>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a4:	f7fe feee 	bl	8003384 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fe feea 	bl	8003384 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0b5      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c2:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1ee      	bne.n	80045ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a1 	beq.w	800472c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d05c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d141      	bne.n	8004682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCC_OscConfig+0x478>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe febe 	bl	8003384 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fe feba 	bl	8003384 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e087      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	491b      	ldr	r1, [pc, #108]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCC_OscConfig+0x478>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fe fe93 	bl	8003384 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fe fe8f 	bl	8003384 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e05c      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x416>
 8004680:	e054      	b.n	800472c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <HAL_RCC_OscConfig+0x478>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fe fe7c 	bl	8003384 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004690:	f7fe fe78 	bl	8003384 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e045      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_OscConfig+0x470>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x444>
 80046ae:	e03d      	b.n	800472c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e038      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40007000 	.word	0x40007000
 80046c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x4ec>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d028      	beq.n	8004728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d121      	bne.n	8004728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d11a      	bne.n	8004728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	3b01      	subs	r3, #1
 8004712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d107      	bne.n	8004728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0cc      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d90c      	bls.n	8004778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b8      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a52      	ldr	r2, [pc, #328]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494d      	ldr	r1, [pc, #308]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d044      	beq.n	800485c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d119      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e067      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4934      	ldr	r1, [pc, #208]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800482c:	f7fe fdaa 	bl	8003384 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fe fda6 	bl	8003384 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e04f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d20c      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e032      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4916      	ldr	r1, [pc, #88]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490e      	ldr	r1, [pc, #56]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 f821 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490a      	ldr	r1, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fd0a 	bl	80032fc <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08006f08 	.word	0x08006f08
 8004900:	20000008 	.word	0x20000008
 8004904:	2000000c 	.word	0x2000000c

08004908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490c:	b094      	sub	sp, #80	; 0x50
 800490e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
 8004914:	2300      	movs	r3, #0
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	2300      	movs	r3, #0
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004920:	4b79      	ldr	r3, [pc, #484]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d00d      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x40>
 800492c:	2b08      	cmp	r3, #8
 800492e:	f200 80e1 	bhi.w	8004af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x34>
 8004936:	2b04      	cmp	r3, #4
 8004938:	d003      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x3a>
 800493a:	e0db      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004940:	e0db      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004942:	4b73      	ldr	r3, [pc, #460]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004946:	e0d8      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004948:	4b6f      	ldr	r3, [pc, #444]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004952:	4b6d      	ldr	r3, [pc, #436]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d063      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	2200      	movs	r2, #0
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
 8004968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
 8004972:	2300      	movs	r3, #0
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	f04f 0000 	mov.w	r0, #0
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	0159      	lsls	r1, r3, #5
 8004988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498c:	0150      	lsls	r0, r2, #5
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4621      	mov	r1, r4
 8004994:	1a51      	subs	r1, r2, r1
 8004996:	6139      	str	r1, [r7, #16]
 8004998:	4629      	mov	r1, r5
 800499a:	eb63 0301 	sbc.w	r3, r3, r1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ac:	4659      	mov	r1, fp
 80049ae:	018b      	lsls	r3, r1, #6
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b6:	4651      	mov	r1, sl
 80049b8:	018a      	lsls	r2, r1, #6
 80049ba:	4651      	mov	r1, sl
 80049bc:	ebb2 0801 	subs.w	r8, r2, r1
 80049c0:	4659      	mov	r1, fp
 80049c2:	eb63 0901 	sbc.w	r9, r3, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	eb18 0303 	adds.w	r3, r8, r3
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	462b      	mov	r3, r5
 80049e8:	eb49 0303 	adc.w	r3, r9, r3
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049fa:	4629      	mov	r1, r5
 80049fc:	024b      	lsls	r3, r1, #9
 80049fe:	4621      	mov	r1, r4
 8004a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a04:	4621      	mov	r1, r4
 8004a06:	024a      	lsls	r2, r1, #9
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0e:	2200      	movs	r2, #0
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a18:	f7fb fbde 	bl	80001d8 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	e058      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4611      	mov	r1, r2
 8004a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	0159      	lsls	r1, r3, #5
 8004a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a52:	0150      	lsls	r0, r2, #5
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4641      	mov	r1, r8
 8004a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a5e:	4649      	mov	r1, r9
 8004a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a78:	ebb2 040a 	subs.w	r4, r2, sl
 8004a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	00eb      	lsls	r3, r5, #3
 8004a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8e:	00e2      	lsls	r2, r4, #3
 8004a90:	4614      	mov	r4, r2
 8004a92:	461d      	mov	r5, r3
 8004a94:	4643      	mov	r3, r8
 8004a96:	18e3      	adds	r3, r4, r3
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	eb45 0303 	adc.w	r3, r5, r3
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	028b      	lsls	r3, r1, #10
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab8:	4621      	mov	r1, r4
 8004aba:	028a      	lsls	r2, r1, #10
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	61fa      	str	r2, [r7, #28]
 8004ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004acc:	f7fb fb84 	bl	80001d8 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3750      	adds	r7, #80	; 0x50
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	00f42400 	.word	0x00f42400
 8004b10:	007a1200 	.word	0x007a1200

08004b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000008 	.word	0x20000008

08004b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b30:	f7ff fff0 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	0a9b      	lsrs	r3, r3, #10
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4903      	ldr	r1, [pc, #12]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	08006f18 	.word	0x08006f18

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b58:	f7ff ffdc 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0b5b      	lsrs	r3, r3, #13
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	08006f18 	.word	0x08006f18

08004b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07b      	b.n	8004c86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9e:	d009      	beq.n	8004bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
 8004ba6:	e005      	b.n	8004bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe f93a 	bl	8002e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 0104 	and.w	r1, r3, #4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0210 	and.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_Transmit+0x22>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e126      	b.n	8004efe <HAL_SPI_Transmit+0x270>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb8:	f7fe fb64 	bl	8003384 <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd2:	e10b      	b.n	8004eec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Transmit+0x52>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce4:	e102      	b.n	8004eec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d10f      	bne.n	8004d4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d007      	beq.n	8004d6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d74:	d14b      	bne.n	8004e0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_Transmit+0xf6>
 8004d7e:	8afb      	ldrh	r3, [r7, #22]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d13e      	bne.n	8004e02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004da8:	e02b      	b.n	8004e02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d112      	bne.n	8004dde <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ddc:	e011      	b.n	8004e02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dde:	f7fe fad1 	bl	8003384 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d803      	bhi.n	8004df6 <HAL_SPI_Transmit+0x168>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Transmit+0x16e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e00:	e074      	b.n	8004eec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ce      	bne.n	8004daa <HAL_SPI_Transmit+0x11c>
 8004e0c:	e04c      	b.n	8004ea8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_Transmit+0x18e>
 8004e16:	8afb      	ldrh	r3, [r7, #22]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d140      	bne.n	8004e9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e42:	e02c      	b.n	8004e9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d113      	bne.n	8004e7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e78:	e011      	b.n	8004e9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fe fa83 	bl	8003384 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x204>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x20a>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e9c:	e026      	b.n	8004eec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1cd      	bne.n	8004e44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fbcb 	bl	8005648 <SPI_EndRxTxTransaction>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e000      	b.n	8004eec <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b088      	sub	sp, #32
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d112      	bne.n	8004f4a <HAL_SPI_Receive+0x44>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10e      	bne.n	8004f4a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f34:	88fa      	ldrh	r2, [r7, #6]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f8f1 	bl	8005128 <HAL_SPI_TransmitReceive>
 8004f46:	4603      	mov	r3, r0
 8004f48:	e0ea      	b.n	8005120 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_SPI_Receive+0x52>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0e3      	b.n	8005120 <HAL_SPI_Receive+0x21a>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f60:	f7fe fa10 	bl	8003384 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f76:	e0ca      	b.n	800510e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SPI_Receive+0x7e>
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f88:	e0c1      	b.n	800510e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d007      	beq.n	8005010 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d162      	bne.n	80050de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005018:	e02e      	b.n	8005078 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d115      	bne.n	8005054 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f103 020c 	add.w	r2, r3, #12
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005052:	e011      	b.n	8005078 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005054:	f7fe f996 	bl	8003384 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d803      	bhi.n	800506c <HAL_SPI_Receive+0x166>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Receive+0x16c>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005076:	e04a      	b.n	800510e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1cb      	bne.n	800501a <HAL_SPI_Receive+0x114>
 8005082:	e031      	b.n	80050e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d113      	bne.n	80050ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	b292      	uxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050b8:	e011      	b.n	80050de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ba:	f7fe f963 	bl	8003384 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d803      	bhi.n	80050d2 <HAL_SPI_Receive+0x1cc>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d102      	bne.n	80050d8 <HAL_SPI_Receive+0x1d2>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050dc:	e017      	b.n	800510e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1cd      	bne.n	8005084 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fa45 	bl	800557c <SPI_EndRxTransaction>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
 800510a:	e000      	b.n	800510e <HAL_SPI_Receive+0x208>
  }

error :
 800510c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	; 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005136:	2301      	movs	r3, #1
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_SPI_TransmitReceive+0x26>
 800514a:	2302      	movs	r3, #2
 800514c:	e18a      	b.n	8005464 <HAL_SPI_TransmitReceive+0x33c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005156:	f7fe f915 	bl	8003384 <HAL_GetTick>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005174:	2b01      	cmp	r3, #1
 8005176:	d00f      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x70>
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517e:	d107      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x68>
 8005188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800518c:	2b04      	cmp	r3, #4
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005196:	e15b      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x82>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x82>
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051b0:	e14e      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2205      	movs	r2, #5
 80051c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	887a      	ldrh	r2, [r7, #2]
 80051d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	887a      	ldrh	r2, [r7, #2]
 80051ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d007      	beq.n	800521a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005218:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005222:	d178      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x10a>
 800522c:	8b7b      	ldrh	r3, [r7, #26]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d166      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	1c9a      	adds	r2, r3, #2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005256:	e053      	b.n	8005300 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d11b      	bne.n	800529e <HAL_SPI_TransmitReceive+0x176>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <HAL_SPI_TransmitReceive+0x176>
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d113      	bne.n	800529e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d119      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1b8>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d014      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	b292      	uxth	r2, r2
 80052c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	1c9a      	adds	r2, r3, #2
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052dc:	2301      	movs	r3, #1
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052e0:	f7fe f850 	bl	8003384 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d807      	bhi.n	8005300 <HAL_SPI_TransmitReceive+0x1d8>
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d003      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052fe:	e0a7      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1a6      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x130>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1a1      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x130>
 8005314:	e07c      	b.n	8005410 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x1fc>
 800531e:	8b7b      	ldrh	r3, [r7, #26]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d16b      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	7812      	ldrb	r2, [r2, #0]
 8005330:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534a:	e057      	b.n	80053fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d11c      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x26c>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x26c>
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d114      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d119      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x2ae>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d014      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053d2:	2301      	movs	r3, #1
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053d6:	f7fd ffd5 	bl	8003384 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d803      	bhi.n	80053ee <HAL_SPI_TransmitReceive+0x2c6>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d102      	bne.n	80053f4 <HAL_SPI_TransmitReceive+0x2cc>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053fa:	e029      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1a2      	bne.n	800534c <HAL_SPI_TransmitReceive+0x224>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d19d      	bne.n	800534c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f917 	bl	8005648 <SPI_EndRxTxTransaction>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800542c:	e010      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	e000      	b.n	8005450 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800544e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005464:	4618      	mov	r0, r3
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800547c:	f7fd ff82 	bl	8003384 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4413      	add	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800548c:	f7fd ff7a 	bl	8003384 <HAL_GetTick>
 8005490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	015b      	lsls	r3, r3, #5
 8005498:	0d1b      	lsrs	r3, r3, #20
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a2:	e054      	b.n	800554e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d050      	beq.n	800554e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054ac:	f7fd ff6a 	bl	8003384 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d902      	bls.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d13d      	bne.n	800553e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d111      	bne.n	8005500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e4:	d004      	beq.n	80054f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ee:	d107      	bne.n	8005500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d10f      	bne.n	800552a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e017      	b.n	800556e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3b01      	subs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4013      	ands	r3, r2
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	429a      	cmp	r2, r3
 800556a:	d19b      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000008 	.word	0x20000008

0800557c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005590:	d111      	bne.n	80055b6 <SPI_EndRxTransaction+0x3a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559a:	d004      	beq.n	80055a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d107      	bne.n	80055b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055be:	d12a      	bne.n	8005616 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c8:	d012      	beq.n	80055f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff ff49 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e026      	b.n	800563e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2101      	movs	r1, #1
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ff36 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01a      	beq.n	800563c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e013      	b.n	800563e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	2101      	movs	r1, #1
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ff23 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e000      	b.n	800563e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <SPI_EndRxTxTransaction+0x7c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <SPI_EndRxTxTransaction+0x80>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0d5b      	lsrs	r3, r3, #21
 8005660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005672:	d112      	bne.n	800569a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff fef4 	bl	800546c <SPI_WaitFlagStateUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d0f2      	beq.n	800569a <SPI_EndRxTxTransaction+0x52>
 80056b4:	e000      	b.n	80056b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80056b6:	bf00      	nop
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000008 	.word	0x20000008
 80056c8:	165e9f81 	.word	0x165e9f81

080056cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e041      	b.n	8005762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fd fbf0 	bl	8002ed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f000 f9a0 	bl	8005a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_TIM_PWM_Start+0x24>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e022      	b.n	80057d6 <HAL_TIM_PWM_Start+0x6a>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d109      	bne.n	80057aa <HAL_TIM_PWM_Start+0x3e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	e015      	b.n	80057d6 <HAL_TIM_PWM_Start+0x6a>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d109      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x58>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e008      	b.n	80057d6 <HAL_TIM_PWM_Start+0x6a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e068      	b.n	80058b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0x82>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ec:	e013      	b.n	8005816 <HAL_TIM_PWM_Start+0xaa>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_PWM_Start+0x92>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057fc:	e00b      	b.n	8005816 <HAL_TIM_PWM_Start+0xaa>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d104      	bne.n	800580e <HAL_TIM_PWM_Start+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580c:	e003      	b.n	8005816 <HAL_TIM_PWM_Start+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb22 	bl	8005e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <HAL_TIM_PWM_Start+0x14c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d107      	bne.n	800583e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <HAL_TIM_PWM_Start+0x14c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_TIM_PWM_Start+0x10e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005850:	d013      	beq.n	800587a <HAL_TIM_PWM_Start+0x10e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_TIM_PWM_Start+0x150>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_TIM_PWM_Start+0x10e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_TIM_PWM_Start+0x154>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIM_PWM_Start+0x10e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <HAL_TIM_PWM_Start+0x158>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIM_PWM_Start+0x10e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_TIM_PWM_Start+0x15c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d010      	beq.n	80058ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589c:	e007      	b.n	80058ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40014000 	.word	0x40014000

080058cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e0ae      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	f200 809f 	bhi.w	8005a38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005935 	.word	0x08005935
 8005904:	08005a39 	.word	0x08005a39
 8005908:	08005a39 	.word	0x08005a39
 800590c:	08005a39 	.word	0x08005a39
 8005910:	08005975 	.word	0x08005975
 8005914:	08005a39 	.word	0x08005a39
 8005918:	08005a39 	.word	0x08005a39
 800591c:	08005a39 	.word	0x08005a39
 8005920:	080059b7 	.word	0x080059b7
 8005924:	08005a39 	.word	0x08005a39
 8005928:	08005a39 	.word	0x08005a39
 800592c:	08005a39 	.word	0x08005a39
 8005930:	080059f7 	.word	0x080059f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f908 	bl	8005b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
      break;
 8005972:	e064      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f94e 	bl	8005c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e043      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f999 	bl	8005cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0208 	orr.w	r2, r2, #8
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
      break;
 80059f4:	e023      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f9e3 	bl	8005dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	021a      	lsls	r2, r3, #8
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <TIM_Base_SetConfig+0xe4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0x38>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x38>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a31      	ldr	r2, [pc, #196]	; (8005b38 <TIM_Base_SetConfig+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x38>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a30      	ldr	r2, [pc, #192]	; (8005b3c <TIM_Base_SetConfig+0xec>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x38>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a2f      	ldr	r2, [pc, #188]	; (8005b40 <TIM_Base_SetConfig+0xf0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a25      	ldr	r2, [pc, #148]	; (8005b34 <TIM_Base_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01b      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d017      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_Base_SetConfig+0xe8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_Base_SetConfig+0xec>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <TIM_Base_SetConfig+0xf0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <TIM_Base_SetConfig+0xf4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <TIM_Base_SetConfig+0xf8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0x8a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <TIM_Base_SetConfig+0xfc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <TIM_Base_SetConfig+0xe4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	615a      	str	r2, [r3, #20]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800

08005b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f023 0302 	bic.w	r3, r3, #2
 8005b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <TIM_OC1_SetConfig+0xc8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10c      	bne.n	8005bc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0308 	bic.w	r3, r3, #8
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 0304 	bic.w	r3, r3, #4
 8005bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <TIM_OC1_SetConfig+0xc8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d111      	bne.n	8005bf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40010000 	.word	0x40010000

08005c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0210 	bic.w	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0320 	bic.w	r3, r3, #32
 8005c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <TIM_OC2_SetConfig+0xd4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10d      	bne.n	8005c98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <TIM_OC2_SetConfig+0xd4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d113      	bne.n	8005cc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000

08005cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <TIM_OC3_SetConfig+0xd0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d10d      	bne.n	8005d6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <TIM_OC3_SetConfig+0xd0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40010000 	.word	0x40010000

08005dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <TIM_OC4_SetConfig+0x9c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d109      	bne.n	8005e3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000

08005e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e050      	b.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d018      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f18:	d013      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10c      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800
 8005f88:	40000c00 	.word	0x40000c00
 8005f8c:	40014000 	.word	0x40014000

08005f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e03d      	b.n	8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e03f      	b.n	80060c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fd f86c 	bl	8003138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc7b 	bl	8006974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b0ba      	sub	sp, #232	; 0xe8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800610e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10f      	bne.n	8006136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_UART_IRQHandler+0x66>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fb65 	bl	80067fe <UART_Receive_IT>
      return;
 8006134:	e256      	b.n	80065e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80de 	beq.w	80062fc <HAL_UART_IRQHandler+0x22c>
 8006140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80d1 	beq.w	80062fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <HAL_UART_IRQHandler+0xae>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_UART_IRQHandler+0xd2>
 800618a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0202 	orr.w	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xf6>
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0204 	orr.w	r2, r3, #4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d011      	beq.n	80061f6 <HAL_UART_IRQHandler+0x126>
 80061d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f043 0208 	orr.w	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 81ed 	beq.w	80065da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_UART_IRQHandler+0x14e>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 faf0 	bl	80067fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <HAL_UART_IRQHandler+0x17a>
 8006242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d04f      	beq.n	80062ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9f8 	bl	8006640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d141      	bne.n	80062e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800628a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800628e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1d9      	bne.n	800625e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d013      	beq.n	80062da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	4a7d      	ldr	r2, [pc, #500]	; (80064ac <HAL_UART_IRQHandler+0x3dc>)
 80062b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd fe03 	bl	8003eca <HAL_DMA_Abort_IT>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	e00e      	b.n	80062f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f99a 	bl	8006614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	e00a      	b.n	80062f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f996 	bl	8006614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	e006      	b.n	80062f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f992 	bl	8006614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062f6:	e170      	b.n	80065da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	bf00      	nop
    return;
 80062fa:	e16e      	b.n	80065da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	2b01      	cmp	r3, #1
 8006302:	f040 814a 	bne.w	800659a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8143 	beq.w	800659a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 813c 	beq.w	800659a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	f040 80b4 	bne.w	80064b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8140 	beq.w	80065de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006366:	429a      	cmp	r2, r3
 8006368:	f080 8139 	bcs.w	80065de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006372:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637e:	f000 8088 	beq.w	8006492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1d9      	bne.n	8006382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3314      	adds	r3, #20
 80063ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e1      	bne.n	80063ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800641a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800641c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3314      	adds	r3, #20
 800642a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800642e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006430:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800643c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e3      	bne.n	800640a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006462:	f023 0310 	bic.w	r3, r3, #16
 8006466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006474:	65ba      	str	r2, [r7, #88]	; 0x58
 8006476:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800647a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e3      	bne.n	8006450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd fcac 	bl	8003dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800649a:	b29b      	uxth	r3, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f8c0 	bl	8006628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064a8:	e099      	b.n	80065de <HAL_UART_IRQHandler+0x50e>
 80064aa:	bf00      	nop
 80064ac:	08006707 	.word	0x08006707
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 808b 	beq.w	80065e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064fa:	647a      	str	r2, [r7, #68]	; 0x44
 80064fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e3      	bne.n	80064d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3314      	adds	r3, #20
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	623b      	str	r3, [r7, #32]
   return(result);
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006532:	633a      	str	r2, [r7, #48]	; 0x30
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	60fb      	str	r3, [r7, #12]
   return(result);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0310 	bic.w	r3, r3, #16
 800656a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006578:	61fa      	str	r2, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	617b      	str	r3, [r7, #20]
   return(result);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e3      	bne.n	8006554 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800658c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f848 	bl	8006628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006598:	e023      	b.n	80065e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_UART_IRQHandler+0x4ea>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f8bb 	bl	800672e <UART_Transmit_IT>
    return;
 80065b8:	e014      	b.n	80065e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <HAL_UART_IRQHandler+0x514>
 80065c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f8fb 	bl	80067ce <UART_EndTransmit_IT>
    return;
 80065d8:	e004      	b.n	80065e4 <HAL_UART_IRQHandler+0x514>
    return;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <HAL_UART_IRQHandler+0x514>
      return;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <HAL_UART_IRQHandler+0x514>
      return;
 80065e2:	bf00      	nop
  }
}
 80065e4:	37e8      	adds	r7, #232	; 0xe8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b095      	sub	sp, #84	; 0x54
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006668:	643a      	str	r2, [r7, #64]	; 0x40
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800666e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	61fb      	str	r3, [r7, #28]
   return(result);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d119      	bne.n	80066ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 0310 	bic.w	r3, r3, #16
 80066ce:	647b      	str	r3, [r7, #68]	; 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d8:	61ba      	str	r2, [r7, #24]
 80066da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066fa:	bf00      	nop
 80066fc:	3754      	adds	r7, #84	; 0x54
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ff77 	bl	8006614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b21      	cmp	r3, #33	; 0x21
 8006740:	d13e      	bne.n	80067c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d114      	bne.n	8006776 <UART_Transmit_IT+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d110      	bne.n	8006776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c9a      	adds	r2, r3, #2
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]
 8006774:	e008      	b.n	8006788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6211      	str	r1, [r2, #32]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff fefc 	bl	80065ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08c      	sub	sp, #48	; 0x30
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b22      	cmp	r3, #34	; 0x22
 8006810:	f040 80ab 	bne.w	800696a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d117      	bne.n	800684e <UART_Receive_IT+0x50>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d113      	bne.n	800684e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	b29a      	uxth	r2, r3
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	629a      	str	r2, [r3, #40]	; 0x28
 800684c:	e026      	b.n	800689c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d007      	beq.n	8006872 <UART_Receive_IT+0x74>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <UART_Receive_IT+0x82>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e008      	b.n	8006892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4619      	mov	r1, r3
 80068aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d15a      	bne.n	8006966 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0220 	bic.w	r2, r2, #32
 80068be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d135      	bne.n	800695c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	613b      	str	r3, [r7, #16]
   return(result);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f023 0310 	bic.w	r3, r3, #16
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	623a      	str	r2, [r7, #32]
 8006918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	69f9      	ldr	r1, [r7, #28]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	61bb      	str	r3, [r7, #24]
   return(result);
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b10      	cmp	r3, #16
 8006936:	d10a      	bne.n	800694e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fe67 	bl	8006628 <HAL_UARTEx_RxEventCallback>
 800695a:	e002      	b.n	8006962 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fe4f 	bl	8006600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e002      	b.n	800696c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3730      	adds	r7, #48	; 0x30
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006978:	b0c0      	sub	sp, #256	; 0x100
 800697a:	af00      	add	r7, sp, #0
 800697c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	68d9      	ldr	r1, [r3, #12]
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	ea40 0301 	orr.w	r3, r0, r1
 800699c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069cc:	f021 010c 	bic.w	r1, r1, #12
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069da:	430b      	orrs	r3, r1
 80069dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ee:	6999      	ldr	r1, [r3, #24]
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	ea40 0301 	orr.w	r3, r0, r1
 80069fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b8f      	ldr	r3, [pc, #572]	; (8006c40 <UART_SetConfig+0x2cc>)
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d005      	beq.n	8006a14 <UART_SetConfig+0xa0>
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b8d      	ldr	r3, [pc, #564]	; (8006c44 <UART_SetConfig+0x2d0>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d104      	bne.n	8006a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fe f89e 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006a18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a1c:	e003      	b.n	8006a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a1e:	f7fe f885 	bl	8004b2c <HAL_RCC_GetPCLK1Freq>
 8006a22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	f040 810c 	bne.w	8006c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a46:	4622      	mov	r2, r4
 8006a48:	462b      	mov	r3, r5
 8006a4a:	1891      	adds	r1, r2, r2
 8006a4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a56:	4621      	mov	r1, r4
 8006a58:	eb12 0801 	adds.w	r8, r2, r1
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	eb43 0901 	adc.w	r9, r3, r1
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a76:	4690      	mov	r8, r2
 8006a78:	4699      	mov	r9, r3
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	eb18 0303 	adds.w	r3, r8, r3
 8006a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a84:	462b      	mov	r3, r5
 8006a86:	eb49 0303 	adc.w	r3, r9, r3
 8006a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	18db      	adds	r3, r3, r3
 8006aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	eb42 0303 	adc.w	r3, r2, r3
 8006aae:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ab8:	f7f9 fb8e 	bl	80001d8 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4b61      	ldr	r3, [pc, #388]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	011c      	lsls	r4, r3, #4
 8006aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	1891      	adds	r1, r2, r2
 8006ae2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ae4:	415b      	adcs	r3, r3
 8006ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006aec:	4641      	mov	r1, r8
 8006aee:	eb12 0a01 	adds.w	sl, r2, r1
 8006af2:	4649      	mov	r1, r9
 8006af4:	eb43 0b01 	adc.w	fp, r3, r1
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0c:	4692      	mov	sl, r2
 8006b0e:	469b      	mov	fp, r3
 8006b10:	4643      	mov	r3, r8
 8006b12:	eb1a 0303 	adds.w	r3, sl, r3
 8006b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	18db      	adds	r3, r3, r3
 8006b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b3e:	4613      	mov	r3, r2
 8006b40:	eb42 0303 	adc.w	r3, r2, r3
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
 8006b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b4e:	f7f9 fb43 	bl	80001d8 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	2264      	movs	r2, #100	; 0x64
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	1acb      	subs	r3, r1, r3
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b6e:	4b36      	ldr	r3, [pc, #216]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006b70:	fba3 2302 	umull	r2, r3, r3, r2
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b7c:	441c      	add	r4, r3
 8006b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b90:	4642      	mov	r2, r8
 8006b92:	464b      	mov	r3, r9
 8006b94:	1891      	adds	r1, r2, r2
 8006b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b98:	415b      	adcs	r3, r3
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ba0:	4641      	mov	r1, r8
 8006ba2:	1851      	adds	r1, r2, r1
 8006ba4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	414b      	adcs	r3, r1
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bb8:	4659      	mov	r1, fp
 8006bba:	00cb      	lsls	r3, r1, #3
 8006bbc:	4651      	mov	r1, sl
 8006bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bc2:	4651      	mov	r1, sl
 8006bc4:	00ca      	lsls	r2, r1, #3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4642      	mov	r2, r8
 8006bce:	189b      	adds	r3, r3, r2
 8006bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	eb42 0303 	adc.w	r3, r2, r3
 8006bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	18db      	adds	r3, r3, r3
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	eb42 0303 	adc.w	r3, r2, r3
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c0a:	f7f9 fae5 	bl	80001d8 <__aeabi_uldivmod>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006c14:	fba3 1302 	umull	r1, r3, r3, r2
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	2164      	movs	r1, #100	; 0x64
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	3332      	adds	r3, #50	; 0x32
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <UART_SetConfig+0x2d4>)
 8006c28:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	f003 0207 	and.w	r2, r3, #7
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4422      	add	r2, r4
 8006c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c3c:	e105      	b.n	8006e4a <UART_SetConfig+0x4d6>
 8006c3e:	bf00      	nop
 8006c40:	40011000 	.word	0x40011000
 8006c44:	40011400 	.word	0x40011400
 8006c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c5e:	4642      	mov	r2, r8
 8006c60:	464b      	mov	r3, r9
 8006c62:	1891      	adds	r1, r2, r2
 8006c64:	6239      	str	r1, [r7, #32]
 8006c66:	415b      	adcs	r3, r3
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c6e:	4641      	mov	r1, r8
 8006c70:	1854      	adds	r4, r2, r1
 8006c72:	4649      	mov	r1, r9
 8006c74:	eb43 0501 	adc.w	r5, r3, r1
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	00eb      	lsls	r3, r5, #3
 8006c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c86:	00e2      	lsls	r2, r4, #3
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	4643      	mov	r3, r8
 8006c8e:	18e3      	adds	r3, r4, r3
 8006c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c94:	464b      	mov	r3, r9
 8006c96:	eb45 0303 	adc.w	r3, r5, r3
 8006c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cba:	4629      	mov	r1, r5
 8006cbc:	008b      	lsls	r3, r1, #2
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	008a      	lsls	r2, r1, #2
 8006cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ccc:	f7f9 fa84 	bl	80001d8 <__aeabi_uldivmod>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4b60      	ldr	r3, [pc, #384]	; (8006e58 <UART_SetConfig+0x4e4>)
 8006cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	011c      	lsls	r4, r3, #4
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ce8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	1891      	adds	r1, r2, r2
 8006cf6:	61b9      	str	r1, [r7, #24]
 8006cf8:	415b      	adcs	r3, r3
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d00:	4641      	mov	r1, r8
 8006d02:	1851      	adds	r1, r2, r1
 8006d04:	6139      	str	r1, [r7, #16]
 8006d06:	4649      	mov	r1, r9
 8006d08:	414b      	adcs	r3, r1
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d18:	4659      	mov	r1, fp
 8006d1a:	00cb      	lsls	r3, r1, #3
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d22:	4651      	mov	r1, sl
 8006d24:	00ca      	lsls	r2, r1, #3
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	189b      	adds	r3, r3, r2
 8006d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d34:	464b      	mov	r3, r9
 8006d36:	460a      	mov	r2, r1
 8006d38:	eb42 0303 	adc.w	r3, r2, r3
 8006d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d58:	4649      	mov	r1, r9
 8006d5a:	008b      	lsls	r3, r1, #2
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d62:	4641      	mov	r1, r8
 8006d64:	008a      	lsls	r2, r1, #2
 8006d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d6a:	f7f9 fa35 	bl	80001d8 <__aeabi_uldivmod>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <UART_SetConfig+0x4e4>)
 8006d74:	fba3 1302 	umull	r1, r3, r3, r2
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	2164      	movs	r1, #100	; 0x64
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	3332      	adds	r3, #50	; 0x32
 8006d86:	4a34      	ldr	r2, [pc, #208]	; (8006e58 <UART_SetConfig+0x4e4>)
 8006d88:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d92:	441c      	add	r4, r3
 8006d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d98:	2200      	movs	r2, #0
 8006d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d9c:	677a      	str	r2, [r7, #116]	; 0x74
 8006d9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	1891      	adds	r1, r2, r2
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	415b      	adcs	r3, r3
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006db2:	4641      	mov	r1, r8
 8006db4:	1851      	adds	r1, r2, r1
 8006db6:	6039      	str	r1, [r7, #0]
 8006db8:	4649      	mov	r1, r9
 8006dba:	414b      	adcs	r3, r1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dca:	4659      	mov	r1, fp
 8006dcc:	00cb      	lsls	r3, r1, #3
 8006dce:	4651      	mov	r1, sl
 8006dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	00ca      	lsls	r2, r1, #3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4642      	mov	r2, r8
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de4:	464b      	mov	r3, r9
 8006de6:	460a      	mov	r2, r1
 8006de8:	eb42 0303 	adc.w	r3, r2, r3
 8006dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	663b      	str	r3, [r7, #96]	; 0x60
 8006df8:	667a      	str	r2, [r7, #100]	; 0x64
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e06:	4649      	mov	r1, r9
 8006e08:	008b      	lsls	r3, r1, #2
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e10:	4641      	mov	r1, r8
 8006e12:	008a      	lsls	r2, r1, #2
 8006e14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e18:	f7f9 f9de 	bl	80001d8 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <UART_SetConfig+0x4e4>)
 8006e22:	fba3 1302 	umull	r1, r3, r3, r2
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	2164      	movs	r1, #100	; 0x64
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	3332      	adds	r3, #50	; 0x32
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <UART_SetConfig+0x4e4>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4422      	add	r2, r4
 8006e48:	609a      	str	r2, [r3, #8]
}
 8006e4a:	bf00      	nop
 8006e4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	51eb851f 	.word	0x51eb851f

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f82e 	bl	8006ed0 <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08006f28 	.word	0x08006f28
 8006e98:	08006f28 	.word	0x08006f28
 8006e9c:	08006f28 	.word	0x08006f28
 8006ea0:	08006f2c 	.word	0x08006f2c

08006ea4 <memcpy>:
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4291      	cmp	r1, r2
 8006ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	4770      	bx	lr
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	d1f9      	bne.n	8006eb2 <memcpy+0xe>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <memset>:
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d100      	bne.n	8006eca <memset+0xa>
 8006ec8:	4770      	bx	lr
 8006eca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ece:	e7f9      	b.n	8006ec4 <memset+0x4>

08006ed0 <_init>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr

08006edc <_fini>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr
